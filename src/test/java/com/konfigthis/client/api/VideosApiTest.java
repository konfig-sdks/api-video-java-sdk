/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.Metadata;
import com.konfigthis.client.model.TokenUploadPayload;
import com.konfigthis.client.model.Video;
import com.konfigthis.client.model.VideoClip;
import com.konfigthis.client.model.VideoCreationPayload;
import com.konfigthis.client.model.VideoStatus;
import com.konfigthis.client.model.VideoThumbnailPickPayload;
import com.konfigthis.client.model.VideoThumbnailUploadPayload;
import com.konfigthis.client.model.VideoUpdatePayload;
import com.konfigthis.client.model.VideoUploadPayload;
import com.konfigthis.client.model.VideoWatermark;
import com.konfigthis.client.model.VideosListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosApi
 */
@Disabled
public class VideosApiTest {

    private static VideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosApi(apiClient);
    }

    /**
     * Create a video object
     *
     * Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createObjectTest() throws ApiException {
        String title = null;
        List<String> tags = null;
        String description = null;
        String source = null;
        Boolean _public = null;
        Boolean panoramic = null;
        Boolean mp4Support = null;
        String playerId = null;
        List<Metadata> metadata = null;
        VideoClip clip = null;
        VideoWatermark watermark = null;
        Video response = api.createObject(title)
                .tags(tags)
                .description(description)
                .source(source)
                ._public(_public)
                .panoramic(panoramic)
                .mp4Support(mp4Support)
                .playerId(playerId)
                .metadata(metadata)
                .clip(clip)
                .watermark(watermark)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a video object
     *
     * Delete a video object by video ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVideoObjectTest() throws ApiException {
        String videoId = null;
        api.deleteVideoObject(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a video object
     *
     * Retrieve the video details by video id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoObjectTest() throws ApiException {
        String videoId = null;
        Video response = api.getVideoObject(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve video status and details
     *
     * Retrieve upload status and encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoStatusAndDetailsTest() throws ApiException {
        String videoId = null;
        VideoStatus response = api.getVideoStatusAndDetails(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a video
     *
     * Ingest a video from a source or file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ingestVideoFromSourceTest() throws ApiException {
        String videoId = null;
        File _file = null;
        String contentRange = null;
        Video response = api.ingestVideoFromSource(videoId, _file)
                .contentRange(contentRange)
                .execute();
        // TODO: test validations
    }

    /**
     * List all video objects
     *
     * List all the video objects that are associated with the current workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String title = null;
        List<String> tags = null;
        Map<String, String> metadata = null;
        String description = null;
        String liveStreamId = null;
        String sortBy = null;
        String sortOrder = null;
        Integer currentPage = null;
        Integer pageSize = null;
        VideosListResponse response = api.listAllObjects()
                .title(title)
                .tags(tags)
                .metadata(metadata)
                .description(description)
                .liveStreamId(liveStreamId)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .currentPage(currentPage)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Set a thumbnail
     *
     * Set a thumbnail from a specific time interval within a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setThumbnailFromIntervalTest() throws ApiException {
        String timecode = null;
        String videoId = null;
        Video response = api.setThumbnailFromInterval(timecode, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a video object
     *
     * Update the parameters associated with a video ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVideoObjectParametersTest() throws ApiException {
        String videoId = null;
        List<String> tags = null;
        String title = null;
        String description = null;
        String playerId = null;
        Boolean _public = null;
        Boolean panoramic = null;
        Boolean mp4Support = null;
        List<Metadata> metadata = null;
        Video response = api.updateVideoObjectParameters(videoId)
                .tags(tags)
                .title(title)
                .description(description)
                .playerId(playerId)
                ._public(_public)
                .panoramic(panoramic)
                .mp4Support(mp4Support)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload with an delegated upload token
     *
     * Uploading a video with the delegated upload token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadTest() throws ApiException {
        String token = null;
        File _file = null;
        String contentRange = null;
        String videoId = null;
        Video response = api.upload(token, _file)
                .contentRange(contentRange)
                .videoId(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a thumbnail
     *
     * Upload a thumbnail for a certain video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadThumbnailTest() throws ApiException {
        String videoId = null;
        File _file = null;
        Video response = api.uploadThumbnail(videoId, _file)
                .execute();
        // TODO: test validations
    }

}
