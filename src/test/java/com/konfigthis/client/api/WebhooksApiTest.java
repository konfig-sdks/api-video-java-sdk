/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Webhook;
import com.konfigthis.client.model.WebhooksCreationPayload;
import com.konfigthis.client.model.WebhooksListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private static WebhooksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebhooksApi(apiClient);
    }

    /**
     * Create Webhook
     *
     * Webhooks can push notifications to your server, rather than polling api.video for changes. We currently offer four events:  * &#x60;&#x60;&#x60;video.encoding.quality.completed&#x60;&#x60;&#x60; Occurs when a new video is uploaded into your account, it will be encoded into several different HLS and mp4 qualities. When each version is encoded, your webhook will get a notification.  It will look like &#x60;&#x60;&#x60;{ \&quot;type\&quot;: \&quot;video.encoding.quality.completed\&quot;, \&quot;emittedAt\&quot;: \&quot;2021-01-29T16:46:25.217+01:00\&quot;, \&quot;videoId\&quot;: \&quot;viXXXXXXXX\&quot;, \&quot;encoding\&quot;: \&quot;hls\&quot;, \&quot;quality\&quot;: \&quot;720p\&quot;} &#x60;&#x60;&#x60;. This request says that the 720p HLS encoding was completed. * &#x60;&#x60;&#x60;live-stream.broadcast.started&#x60;&#x60;&#x60;  When a live stream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires. * &#x60;&#x60;&#x60;live-stream.broadcast.ended&#x60;&#x60;&#x60;  This event fires when a live stream has finished broadcasting. * &#x60;&#x60;&#x60;video.source.recorded&#x60;&#x60;&#x60;  This event occurs when a live stream is recorded and submitted for encoding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookEventTest() throws ApiException {
        List<String> events = null;
        String url = null;
        Webhook response = api.createWebhookEvent(events, url)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Webhook
     *
     * This endpoint will delete the indicated webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String webhookId = null;
        api.deleteWebhook(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Webhook details
     *
     * Retrieve webhook details by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsByIdTest() throws ApiException {
        String webhookId = null;
        Webhook response = api.getDetailsById(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all webhooks
     *
     * Retrieve a list of all webhooks configured for the current workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        String events = null;
        Integer currentPage = null;
        Integer pageSize = null;
        WebhooksListResponse response = api.listAll()
                .events(events)
                .currentPage(currentPage)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

}
