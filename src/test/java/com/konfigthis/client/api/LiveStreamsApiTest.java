/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.LiveStream;
import com.konfigthis.client.model.LiveStreamCreationPayload;
import com.konfigthis.client.model.LiveStreamListResponse;
import com.konfigthis.client.model.LiveStreamThumbnailUploadPayload;
import com.konfigthis.client.model.LiveStreamUpdatePayload;
import com.konfigthis.client.model.RestreamsRequestObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveStreamsApi
 */
@Disabled
public class LiveStreamsApiTest {

    private static LiveStreamsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LiveStreamsApi(apiClient);
    }

    /**
     * Create live stream
     *
     * Creates a livestream object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLivestreamObjectTest() throws ApiException {
        String name = null;
        Boolean _public = null;
        String playerId = null;
        List<RestreamsRequestObject> restreams = null;
        LiveStream response = api.createLivestreamObject(name)
                ._public(_public)
                .playerId(playerId)
                .restreams(restreams)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live stream
     *
     * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLivestreamTest() throws ApiException {
        String liveStreamId = null;
        api.deleteLivestream(liveStreamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a thumbnail
     *
     * Send the unique identifier for a live stream to delete its thumbnail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThumbnailTest() throws ApiException {
        String liveStreamId = null;
        LiveStream response = api.deleteThumbnail(liveStreamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve live stream
     *
     * Get a livestream by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLivestreamByIdTest() throws ApiException {
        String liveStreamId = null;
        LiveStream response = api.getLivestreamById(liveStreamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all live streams
     *
     * Get the list of livestreams on the workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        String streamKey = null;
        String name = null;
        String sortBy = null;
        String sortOrder = null;
        Integer currentPage = null;
        Integer pageSize = null;
        LiveStreamListResponse response = api.listAll()
                .streamKey(streamKey)
                .name(name)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .currentPage(currentPage)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live stream
     *
     * Updates the livestream object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLivestreamObjectTest() throws ApiException {
        String liveStreamId = null;
        String name = null;
        Boolean _public = null;
        String playerId = null;
        List<RestreamsRequestObject> restreams = null;
        LiveStream response = api.updateLivestreamObject(liveStreamId)
                .name(name)
                ._public(_public)
                .playerId(playerId)
                .restreams(restreams)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a thumbnail
     *
     * Upload the thumbnail for the livestream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadThumbnailTest() throws ApiException {
        String liveStreamId = null;
        File _file = null;
        LiveStream response = api.uploadThumbnail(liveStreamId, _file)
                .execute();
        // TODO: test validations
    }

}
