/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VideoWatermark
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoWatermark {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private String top;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  public static final String SERIALIZED_NAME_BOTTOM = "bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private String bottom;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private String right;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private String width;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private String height;

  public static final String SERIALIZED_NAME_OPACITY = "opacity";
  @SerializedName(SERIALIZED_NAME_OPACITY)
  private String opacity;

  public VideoWatermark() {
  }

  public VideoWatermark id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * id of the watermark
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "watermark_1BWr2L5MTQwxGkuxKjzh6i", value = "id of the watermark")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public VideoWatermark top(String top) {
    
    
    
    
    this.top = top;
    return this;
  }

   /**
   * Distance expressed in px or % between the top-border of the video and the watermark-image.
   * @return top
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10px", value = "Distance expressed in px or % between the top-border of the video and the watermark-image.")

  public String getTop() {
    return top;
  }


  public void setTop(String top) {
    
    
    
    this.top = top;
  }


  public VideoWatermark left(String left) {
    
    
    
    
    this.left = left;
    return this;
  }

   /**
   * Distance expressed in px or % between the left-border of the video and the watermark-image.
   * @return left
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10px", value = "Distance expressed in px or % between the left-border of the video and the watermark-image.")

  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    
    
    
    this.left = left;
  }


  public VideoWatermark bottom(String bottom) {
    
    
    
    
    this.bottom = bottom;
    return this;
  }

   /**
   * Distance expressed in px or % between the bottom-border of the video and the watermark-image.
   * @return bottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10px", value = "Distance expressed in px or % between the bottom-border of the video and the watermark-image.")

  public String getBottom() {
    return bottom;
  }


  public void setBottom(String bottom) {
    
    
    
    this.bottom = bottom;
  }


  public VideoWatermark right(String right) {
    
    
    
    
    this.right = right;
    return this;
  }

   /**
   * Distance expressed in px or % between the right-border of the video and the watermark-image.
   * @return right
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10px", value = "Distance expressed in px or % between the right-border of the video and the watermark-image.")

  public String getRight() {
    return right;
  }


  public void setRight(String right) {
    
    
    
    this.right = right;
  }


  public VideoWatermark width(String width) {
    
    
    
    
    this.width = width;
    return this;
  }

   /**
   * Width of the watermark-image relative to the video if expressed in %. Otherwise a fixed width. NOTE: To keep intrinsic watermark-image width use &#x60;initial&#x60;.
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "initial", value = "Width of the watermark-image relative to the video if expressed in %. Otherwise a fixed width. NOTE: To keep intrinsic watermark-image width use `initial`.")

  public String getWidth() {
    return width;
  }


  public void setWidth(String width) {
    
    
    
    this.width = width;
  }


  public VideoWatermark height(String height) {
    
    
    
    
    this.height = height;
    return this;
  }

   /**
   * Height of the watermark-image relative to the video if expressed in %. Otherwise a fixed height. NOTE: To keep intrinsic watermark-image height use &#x60;initial&#x60;.
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "initial", value = "Height of the watermark-image relative to the video if expressed in %. Otherwise a fixed height. NOTE: To keep intrinsic watermark-image height use `initial`.")

  public String getHeight() {
    return height;
  }


  public void setHeight(String height) {
    
    
    
    this.height = height;
  }


  public VideoWatermark opacity(String opacity) {
    
    
    
    
    this.opacity = opacity;
    return this;
  }

   /**
   * Opacity expressed in % only to specify the degree of the watermark-image transparency with the video.
   * @return opacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "70%", value = "Opacity expressed in % only to specify the degree of the watermark-image transparency with the video.")

  public String getOpacity() {
    return opacity;
  }


  public void setOpacity(String opacity) {
    
    
    
    this.opacity = opacity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoWatermark instance itself
   */
  public VideoWatermark putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoWatermark videoWatermark = (VideoWatermark) o;
    return Objects.equals(this.id, videoWatermark.id) &&
        Objects.equals(this.top, videoWatermark.top) &&
        Objects.equals(this.left, videoWatermark.left) &&
        Objects.equals(this.bottom, videoWatermark.bottom) &&
        Objects.equals(this.right, videoWatermark.right) &&
        Objects.equals(this.width, videoWatermark.width) &&
        Objects.equals(this.height, videoWatermark.height) &&
        Objects.equals(this.opacity, videoWatermark.opacity)&&
        Objects.equals(this.additionalProperties, videoWatermark.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, top, left, bottom, right, width, height, opacity, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoWatermark {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("top");
    openapiFields.add("left");
    openapiFields.add("bottom");
    openapiFields.add("right");
    openapiFields.add("width");
    openapiFields.add("height");
    openapiFields.add("opacity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoWatermark
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoWatermark.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoWatermark is not found in the empty JSON string", VideoWatermark.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) && !jsonObj.get("top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("top").toString()));
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("bottom") != null && !jsonObj.get("bottom").isJsonNull()) && !jsonObj.get("bottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottom").toString()));
      }
      if ((jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) && !jsonObj.get("right").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right").toString()));
      }
      if ((jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) && !jsonObj.get("width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
      }
      if ((jsonObj.get("height") != null && !jsonObj.get("height").isJsonNull()) && !jsonObj.get("height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("height").toString()));
      }
      if ((jsonObj.get("opacity") != null && !jsonObj.get("opacity").isJsonNull()) && !jsonObj.get("opacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opacity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoWatermark.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoWatermark' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoWatermark> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoWatermark.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoWatermark>() {
           @Override
           public void write(JsonWriter out, VideoWatermark value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoWatermark read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoWatermark instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoWatermark given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoWatermark
  * @throws IOException if the JSON string is invalid with respect to VideoWatermark
  */
  public static VideoWatermark fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoWatermark.class);
  }

 /**
  * Convert an instance of VideoWatermark to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

