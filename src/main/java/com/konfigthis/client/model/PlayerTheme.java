/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PlayerThemeAssets;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlayerTheme
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlayerTheme {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_HOVER = "linkHover";
  @SerializedName(SERIALIZED_NAME_LINK_HOVER)
  private String linkHover;

  public static final String SERIALIZED_NAME_LINK_ACTIVE = "linkActive";
  @SerializedName(SERIALIZED_NAME_LINK_ACTIVE)
  private String linkActive;

  public static final String SERIALIZED_NAME_TRACK_PLAYED = "trackPlayed";
  @SerializedName(SERIALIZED_NAME_TRACK_PLAYED)
  private String trackPlayed;

  public static final String SERIALIZED_NAME_TRACK_UNPLAYED = "trackUnplayed";
  @SerializedName(SERIALIZED_NAME_TRACK_UNPLAYED)
  private String trackUnplayed;

  public static final String SERIALIZED_NAME_TRACK_BACKGROUND = "trackBackground";
  @SerializedName(SERIALIZED_NAME_TRACK_BACKGROUND)
  private String trackBackground;

  public static final String SERIALIZED_NAME_BACKGROUND_TOP = "backgroundTop";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_TOP)
  private String backgroundTop;

  public static final String SERIALIZED_NAME_BACKGROUND_BOTTOM = "backgroundBottom";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_BOTTOM)
  private String backgroundBottom;

  public static final String SERIALIZED_NAME_BACKGROUND_TEXT = "backgroundText";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_TEXT)
  private String backgroundText;

  public static final String SERIALIZED_NAME_ENABLE_API = "enableApi";
  @SerializedName(SERIALIZED_NAME_ENABLE_API)
  private Boolean enableApi;

  public static final String SERIALIZED_NAME_ENABLE_CONTROLS = "enableControls";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTROLS)
  private Boolean enableControls;

  public static final String SERIALIZED_NAME_FORCE_AUTOPLAY = "forceAutoplay";
  @SerializedName(SERIALIZED_NAME_FORCE_AUTOPLAY)
  private Boolean forceAutoplay;

  public static final String SERIALIZED_NAME_HIDE_TITLE = "hideTitle";
  @SerializedName(SERIALIZED_NAME_HIDE_TITLE)
  private Boolean hideTitle;

  public static final String SERIALIZED_NAME_FORCE_LOOP = "forceLoop";
  @SerializedName(SERIALIZED_NAME_FORCE_LOOP)
  private Boolean forceLoop;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private PlayerThemeAssets assets;

  public PlayerTheme() {
  }

  public PlayerTheme name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the player theme
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the player theme")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PlayerTheme text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * RGBA color for timer text. Default: rgba(255, 255, 255, 1)
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color for timer text. Default: rgba(255, 255, 255, 1)")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public PlayerTheme link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * RGBA color for all controls. Default: rgba(255, 255, 255, 1)
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color for all controls. Default: rgba(255, 255, 255, 1)")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public PlayerTheme linkHover(String linkHover) {
    
    
    
    
    this.linkHover = linkHover;
    return this;
  }

   /**
   * RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)
   * @return linkHover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)")

  public String getLinkHover() {
    return linkHover;
  }


  public void setLinkHover(String linkHover) {
    
    
    
    this.linkHover = linkHover;
  }


  public PlayerTheme linkActive(String linkActive) {
    
    
    
    
    this.linkActive = linkActive;
    return this;
  }

   /**
   * RGBA color for the play button when hovered.
   * @return linkActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color for the play button when hovered.")

  public String getLinkActive() {
    return linkActive;
  }


  public void setLinkActive(String linkActive) {
    
    
    
    this.linkActive = linkActive;
  }


  public PlayerTheme trackPlayed(String trackPlayed) {
    
    
    
    
    this.trackPlayed = trackPlayed;
    return this;
  }

   /**
   * RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)
   * @return trackPlayed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)")

  public String getTrackPlayed() {
    return trackPlayed;
  }


  public void setTrackPlayed(String trackPlayed) {
    
    
    
    this.trackPlayed = trackPlayed;
  }


  public PlayerTheme trackUnplayed(String trackUnplayed) {
    
    
    
    
    this.trackUnplayed = trackUnplayed;
    return this;
  }

   /**
   * RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)
   * @return trackUnplayed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)")

  public String getTrackUnplayed() {
    return trackUnplayed;
  }


  public void setTrackUnplayed(String trackUnplayed) {
    
    
    
    this.trackUnplayed = trackUnplayed;
  }


  public PlayerTheme trackBackground(String trackBackground) {
    
    
    
    
    this.trackBackground = trackBackground;
    return this;
  }

   /**
   * RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)
   * @return trackBackground
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)")

  public String getTrackBackground() {
    return trackBackground;
  }


  public void setTrackBackground(String trackBackground) {
    
    
    
    this.trackBackground = trackBackground;
  }


  public PlayerTheme backgroundTop(String backgroundTop) {
    
    
    
    
    this.backgroundTop = backgroundTop;
    return this;
  }

   /**
   * RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)
   * @return backgroundTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)")

  public String getBackgroundTop() {
    return backgroundTop;
  }


  public void setBackgroundTop(String backgroundTop) {
    
    
    
    this.backgroundTop = backgroundTop;
  }


  public PlayerTheme backgroundBottom(String backgroundBottom) {
    
    
    
    
    this.backgroundBottom = backgroundBottom;
    return this;
  }

   /**
   * RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)
   * @return backgroundBottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)")

  public String getBackgroundBottom() {
    return backgroundBottom;
  }


  public void setBackgroundBottom(String backgroundBottom) {
    
    
    
    this.backgroundBottom = backgroundBottom;
  }


  public PlayerTheme backgroundText(String backgroundText) {
    
    
    
    
    this.backgroundText = backgroundText;
    return this;
  }

   /**
   * RGBA color for title text. Default: rgba(255, 255, 255, 1)
   * @return backgroundText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RGBA color for title text. Default: rgba(255, 255, 255, 1)")

  public String getBackgroundText() {
    return backgroundText;
  }


  public void setBackgroundText(String backgroundText) {
    
    
    
    this.backgroundText = backgroundText;
  }


  public PlayerTheme enableApi(Boolean enableApi) {
    
    
    
    
    this.enableApi = enableApi;
    return this;
  }

   /**
   * enable/disable player SDK access. Default: true
   * @return enableApi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enable/disable player SDK access. Default: true")

  public Boolean getEnableApi() {
    return enableApi;
  }


  public void setEnableApi(Boolean enableApi) {
    
    
    
    this.enableApi = enableApi;
  }


  public PlayerTheme enableControls(Boolean enableControls) {
    
    
    
    
    this.enableControls = enableControls;
    return this;
  }

   /**
   * enable/disable player controls. Default: true
   * @return enableControls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enable/disable player controls. Default: true")

  public Boolean getEnableControls() {
    return enableControls;
  }


  public void setEnableControls(Boolean enableControls) {
    
    
    
    this.enableControls = enableControls;
  }


  public PlayerTheme forceAutoplay(Boolean forceAutoplay) {
    
    
    
    
    this.forceAutoplay = forceAutoplay;
    return this;
  }

   /**
   * enable/disable player autoplay. Default: false
   * @return forceAutoplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enable/disable player autoplay. Default: false")

  public Boolean getForceAutoplay() {
    return forceAutoplay;
  }


  public void setForceAutoplay(Boolean forceAutoplay) {
    
    
    
    this.forceAutoplay = forceAutoplay;
  }


  public PlayerTheme hideTitle(Boolean hideTitle) {
    
    
    
    
    this.hideTitle = hideTitle;
    return this;
  }

   /**
   * enable/disable title. Default: false
   * @return hideTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enable/disable title. Default: false")

  public Boolean getHideTitle() {
    return hideTitle;
  }


  public void setHideTitle(Boolean hideTitle) {
    
    
    
    this.hideTitle = hideTitle;
  }


  public PlayerTheme forceLoop(Boolean forceLoop) {
    
    
    
    
    this.forceLoop = forceLoop;
    return this;
  }

   /**
   * enable/disable looping. Default: false
   * @return forceLoop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enable/disable looping. Default: false")

  public Boolean getForceLoop() {
    return forceLoop;
  }


  public void setForceLoop(Boolean forceLoop) {
    
    
    
    this.forceLoop = forceLoop;
  }


  public PlayerTheme playerId(String playerId) {
    
    
    
    
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "pl45KFKdlddgk654dspkze", required = true, value = "")

  public String getPlayerId() {
    return playerId;
  }


  public void setPlayerId(String playerId) {
    
    
    
    this.playerId = playerId;
  }


  public PlayerTheme createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the player was created, presented in ISO-8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-31T10:17:47Z", value = "When the player was created, presented in ISO-8601 format.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public PlayerTheme updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * When the player was last updated, presented in ISO-8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-31T10:18:47Z", value = "When the player was last updated, presented in ISO-8601 format.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public PlayerTheme assets(PlayerThemeAssets assets) {
    
    
    
    
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PlayerThemeAssets getAssets() {
    return assets;
  }


  public void setAssets(PlayerThemeAssets assets) {
    
    
    
    this.assets = assets;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlayerTheme instance itself
   */
  public PlayerTheme putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerTheme playerTheme = (PlayerTheme) o;
    return Objects.equals(this.name, playerTheme.name) &&
        Objects.equals(this.text, playerTheme.text) &&
        Objects.equals(this.link, playerTheme.link) &&
        Objects.equals(this.linkHover, playerTheme.linkHover) &&
        Objects.equals(this.linkActive, playerTheme.linkActive) &&
        Objects.equals(this.trackPlayed, playerTheme.trackPlayed) &&
        Objects.equals(this.trackUnplayed, playerTheme.trackUnplayed) &&
        Objects.equals(this.trackBackground, playerTheme.trackBackground) &&
        Objects.equals(this.backgroundTop, playerTheme.backgroundTop) &&
        Objects.equals(this.backgroundBottom, playerTheme.backgroundBottom) &&
        Objects.equals(this.backgroundText, playerTheme.backgroundText) &&
        Objects.equals(this.enableApi, playerTheme.enableApi) &&
        Objects.equals(this.enableControls, playerTheme.enableControls) &&
        Objects.equals(this.forceAutoplay, playerTheme.forceAutoplay) &&
        Objects.equals(this.hideTitle, playerTheme.hideTitle) &&
        Objects.equals(this.forceLoop, playerTheme.forceLoop) &&
        Objects.equals(this.playerId, playerTheme.playerId) &&
        Objects.equals(this.createdAt, playerTheme.createdAt) &&
        Objects.equals(this.updatedAt, playerTheme.updatedAt) &&
        Objects.equals(this.assets, playerTheme.assets)&&
        Objects.equals(this.additionalProperties, playerTheme.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, text, link, linkHover, linkActive, trackPlayed, trackUnplayed, trackBackground, backgroundTop, backgroundBottom, backgroundText, enableApi, enableControls, forceAutoplay, hideTitle, forceLoop, playerId, createdAt, updatedAt, assets, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerTheme {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkHover: ").append(toIndentedString(linkHover)).append("\n");
    sb.append("    linkActive: ").append(toIndentedString(linkActive)).append("\n");
    sb.append("    trackPlayed: ").append(toIndentedString(trackPlayed)).append("\n");
    sb.append("    trackUnplayed: ").append(toIndentedString(trackUnplayed)).append("\n");
    sb.append("    trackBackground: ").append(toIndentedString(trackBackground)).append("\n");
    sb.append("    backgroundTop: ").append(toIndentedString(backgroundTop)).append("\n");
    sb.append("    backgroundBottom: ").append(toIndentedString(backgroundBottom)).append("\n");
    sb.append("    backgroundText: ").append(toIndentedString(backgroundText)).append("\n");
    sb.append("    enableApi: ").append(toIndentedString(enableApi)).append("\n");
    sb.append("    enableControls: ").append(toIndentedString(enableControls)).append("\n");
    sb.append("    forceAutoplay: ").append(toIndentedString(forceAutoplay)).append("\n");
    sb.append("    hideTitle: ").append(toIndentedString(hideTitle)).append("\n");
    sb.append("    forceLoop: ").append(toIndentedString(forceLoop)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("text");
    openapiFields.add("link");
    openapiFields.add("linkHover");
    openapiFields.add("linkActive");
    openapiFields.add("trackPlayed");
    openapiFields.add("trackUnplayed");
    openapiFields.add("trackBackground");
    openapiFields.add("backgroundTop");
    openapiFields.add("backgroundBottom");
    openapiFields.add("backgroundText");
    openapiFields.add("enableApi");
    openapiFields.add("enableControls");
    openapiFields.add("forceAutoplay");
    openapiFields.add("hideTitle");
    openapiFields.add("forceLoop");
    openapiFields.add("playerId");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("assets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("playerId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayerTheme
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlayerTheme.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerTheme is not found in the empty JSON string", PlayerTheme.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlayerTheme.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("linkHover") != null && !jsonObj.get("linkHover").isJsonNull()) && !jsonObj.get("linkHover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkHover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkHover").toString()));
      }
      if ((jsonObj.get("linkActive") != null && !jsonObj.get("linkActive").isJsonNull()) && !jsonObj.get("linkActive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkActive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkActive").toString()));
      }
      if ((jsonObj.get("trackPlayed") != null && !jsonObj.get("trackPlayed").isJsonNull()) && !jsonObj.get("trackPlayed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackPlayed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackPlayed").toString()));
      }
      if ((jsonObj.get("trackUnplayed") != null && !jsonObj.get("trackUnplayed").isJsonNull()) && !jsonObj.get("trackUnplayed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackUnplayed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackUnplayed").toString()));
      }
      if ((jsonObj.get("trackBackground") != null && !jsonObj.get("trackBackground").isJsonNull()) && !jsonObj.get("trackBackground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackBackground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackBackground").toString()));
      }
      if ((jsonObj.get("backgroundTop") != null && !jsonObj.get("backgroundTop").isJsonNull()) && !jsonObj.get("backgroundTop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundTop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundTop").toString()));
      }
      if ((jsonObj.get("backgroundBottom") != null && !jsonObj.get("backgroundBottom").isJsonNull()) && !jsonObj.get("backgroundBottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundBottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundBottom").toString()));
      }
      if ((jsonObj.get("backgroundText") != null && !jsonObj.get("backgroundText").isJsonNull()) && !jsonObj.get("backgroundText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundText").toString()));
      }
      if (!jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        PlayerThemeAssets.validateJsonObject(jsonObj.getAsJsonObject("assets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerTheme.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerTheme' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerTheme> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerTheme.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerTheme>() {
           @Override
           public void write(JsonWriter out, PlayerTheme value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerTheme read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlayerTheme instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerTheme given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerTheme
  * @throws IOException if the JSON string is invalid with respect to PlayerTheme
  */
  public static PlayerTheme fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerTheme.class);
  }

 /**
  * Convert an instance of PlayerTheme to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

