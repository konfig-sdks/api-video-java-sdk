/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LiveStreamSessionReferrer
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveStreamSessionReferrer {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private String medium;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "searchTerm";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  public LiveStreamSessionReferrer() {
  }

  public LiveStreamSessionReferrer url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * The website the viewer of the live stream was referred to in order to view the live stream.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://api.video", value = "The website the viewer of the live stream was referred to in order to view the live stream.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public LiveStreamSessionReferrer medium(String medium) {
    
    
    
    
    this.medium = medium;
    return this;
  }

   /**
   * The type of search that brought the viewer to the live stream. Organic would be they found it on their own, paid would be they found it via an advertisement.
   * @return medium
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "organic", value = "The type of search that brought the viewer to the live stream. Organic would be they found it on their own, paid would be they found it via an advertisement.")

  public String getMedium() {
    return medium;
  }


  public void setMedium(String medium) {
    
    
    
    this.medium = medium;
  }


  public LiveStreamSessionReferrer source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Where the viewer came from to see the live stream (usually where they searched from).
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://google.com", value = "Where the viewer came from to see the live stream (usually where they searched from).")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public LiveStreamSessionReferrer searchTerm(String searchTerm) {
    
    
    
    
    this.searchTerm = searchTerm;
    return this;
  }

   /**
   * What term they searched for that led them to the live stream.
   * @return searchTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "video stream", value = "What term they searched for that led them to the live stream.")

  public String getSearchTerm() {
    return searchTerm;
  }


  public void setSearchTerm(String searchTerm) {
    
    
    
    this.searchTerm = searchTerm;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveStreamSessionReferrer instance itself
   */
  public LiveStreamSessionReferrer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamSessionReferrer liveStreamSessionReferrer = (LiveStreamSessionReferrer) o;
    return Objects.equals(this.url, liveStreamSessionReferrer.url) &&
        Objects.equals(this.medium, liveStreamSessionReferrer.medium) &&
        Objects.equals(this.source, liveStreamSessionReferrer.source) &&
        Objects.equals(this.searchTerm, liveStreamSessionReferrer.searchTerm)&&
        Objects.equals(this.additionalProperties, liveStreamSessionReferrer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, medium, source, searchTerm, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamSessionReferrer {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("medium");
    openapiFields.add("source");
    openapiFields.add("searchTerm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveStreamSessionReferrer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveStreamSessionReferrer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStreamSessionReferrer is not found in the empty JSON string", LiveStreamSessionReferrer.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("searchTerm") != null && !jsonObj.get("searchTerm").isJsonNull()) && !jsonObj.get("searchTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchTerm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStreamSessionReferrer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStreamSessionReferrer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStreamSessionReferrer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStreamSessionReferrer.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStreamSessionReferrer>() {
           @Override
           public void write(JsonWriter out, LiveStreamSessionReferrer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStreamSessionReferrer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveStreamSessionReferrer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveStreamSessionReferrer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveStreamSessionReferrer
  * @throws IOException if the JSON string is invalid with respect to LiveStreamSessionReferrer
  */
  public static LiveStreamSessionReferrer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStreamSessionReferrer.class);
  }

 /**
  * Convert an instance of LiveStreamSessionReferrer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

