/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VideoStatusEncodingMetadata
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoStatusEncodingMetadata {
  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_BITRATE = "bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Double bitrate;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FRAMERATE = "framerate";
  @SerializedName(SERIALIZED_NAME_FRAMERATE)
  private Integer framerate;

  public static final String SERIALIZED_NAME_SAMPLERATE = "samplerate";
  @SerializedName(SERIALIZED_NAME_SAMPLERATE)
  private Integer samplerate;

  public static final String SERIALIZED_NAME_VIDEO_CODEC = "videoCodec";
  @SerializedName(SERIALIZED_NAME_VIDEO_CODEC)
  private String videoCodec;

  public static final String SERIALIZED_NAME_AUDIO_CODEC = "audioCodec";
  @SerializedName(SERIALIZED_NAME_AUDIO_CODEC)
  private String audioCodec;

  public static final String SERIALIZED_NAME_ASPECT_RATIO = "aspectRatio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private String aspectRatio;

  public VideoStatusEncodingMetadata() {
  }

  public VideoStatusEncodingMetadata width(Integer width) {
    
    
    
    
    this.width = width;
    return this;
  }

   /**
   * The width of the video in pixels.
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "424", value = "The width of the video in pixels.")

  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    
    
    
    this.width = width;
  }


  public VideoStatusEncodingMetadata height(Integer height) {
    
    
    
    
    this.height = height;
    return this;
  }

   /**
   * The height of the video in pixels.
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "240", value = "The height of the video in pixels.")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    
    
    
    this.height = height;
  }


  public VideoStatusEncodingMetadata bitrate(Double bitrate) {
    
    
    
    
    this.bitrate = bitrate;
    return this;
  }

  public VideoStatusEncodingMetadata bitrate(Integer bitrate) {
    
    
    
    
    this.bitrate = bitrate.doubleValue();
    return this;
  }

   /**
   * The number of bits processed per second.
   * @return bitrate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "411.218", value = "The number of bits processed per second.")

  public Double getBitrate() {
    return bitrate;
  }


  public void setBitrate(Double bitrate) {
    
    
    
    this.bitrate = bitrate;
  }


  public VideoStatusEncodingMetadata duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * The length of the video.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4176", value = "The length of the video.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public VideoStatusEncodingMetadata framerate(Integer framerate) {
    
    
    
    
    this.framerate = framerate;
    return this;
  }

   /**
   * The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).
   * @return framerate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).")

  public Integer getFramerate() {
    return framerate;
  }


  public void setFramerate(Integer framerate) {
    
    
    
    this.framerate = framerate;
  }


  public VideoStatusEncodingMetadata samplerate(Integer samplerate) {
    
    
    
    
    this.samplerate = samplerate;
    return this;
  }

   /**
   * How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.
   * @return samplerate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "48000", value = "How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.")

  public Integer getSamplerate() {
    return samplerate;
  }


  public void setSamplerate(Integer samplerate) {
    
    
    
    this.samplerate = samplerate;
  }


  public VideoStatusEncodingMetadata videoCodec(String videoCodec) {
    
    
    
    
    this.videoCodec = videoCodec;
    return this;
  }

   /**
   * The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. 
   * @return videoCodec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "h264", value = "The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. ")

  public String getVideoCodec() {
    return videoCodec;
  }


  public void setVideoCodec(String videoCodec) {
    
    
    
    this.videoCodec = videoCodec;
  }


  public VideoStatusEncodingMetadata audioCodec(String audioCodec) {
    
    
    
    
    this.audioCodec = audioCodec;
    return this;
  }

   /**
   * The method used to compress and decompress digital audio for your video.
   * @return audioCodec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "aac", value = "The method used to compress and decompress digital audio for your video.")

  public String getAudioCodec() {
    return audioCodec;
  }


  public void setAudioCodec(String audioCodec) {
    
    
    
    this.audioCodec = audioCodec;
  }


  public VideoStatusEncodingMetadata aspectRatio(String aspectRatio) {
    
    
    
    
    this.aspectRatio = aspectRatio;
    return this;
  }

   /**
   * Get aspectRatio
   * @return aspectRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "16/9", value = "")

  public String getAspectRatio() {
    return aspectRatio;
  }


  public void setAspectRatio(String aspectRatio) {
    
    
    
    this.aspectRatio = aspectRatio;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoStatusEncodingMetadata instance itself
   */
  public VideoStatusEncodingMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoStatusEncodingMetadata videoStatusEncodingMetadata = (VideoStatusEncodingMetadata) o;
    return Objects.equals(this.width, videoStatusEncodingMetadata.width) &&
        Objects.equals(this.height, videoStatusEncodingMetadata.height) &&
        Objects.equals(this.bitrate, videoStatusEncodingMetadata.bitrate) &&
        Objects.equals(this.duration, videoStatusEncodingMetadata.duration) &&
        Objects.equals(this.framerate, videoStatusEncodingMetadata.framerate) &&
        Objects.equals(this.samplerate, videoStatusEncodingMetadata.samplerate) &&
        Objects.equals(this.videoCodec, videoStatusEncodingMetadata.videoCodec) &&
        Objects.equals(this.audioCodec, videoStatusEncodingMetadata.audioCodec) &&
        Objects.equals(this.aspectRatio, videoStatusEncodingMetadata.aspectRatio)&&
        Objects.equals(this.additionalProperties, videoStatusEncodingMetadata.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(width, height, bitrate, duration, framerate, samplerate, videoCodec, audioCodec, aspectRatio, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoStatusEncodingMetadata {\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    framerate: ").append(toIndentedString(framerate)).append("\n");
    sb.append("    samplerate: ").append(toIndentedString(samplerate)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("width");
    openapiFields.add("height");
    openapiFields.add("bitrate");
    openapiFields.add("duration");
    openapiFields.add("framerate");
    openapiFields.add("samplerate");
    openapiFields.add("videoCodec");
    openapiFields.add("audioCodec");
    openapiFields.add("aspectRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoStatusEncodingMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoStatusEncodingMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoStatusEncodingMetadata is not found in the empty JSON string", VideoStatusEncodingMetadata.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("videoCodec").isJsonNull() && (jsonObj.get("videoCodec") != null && !jsonObj.get("videoCodec").isJsonNull()) && !jsonObj.get("videoCodec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoCodec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoCodec").toString()));
      }
      if (!jsonObj.get("audioCodec").isJsonNull() && (jsonObj.get("audioCodec") != null && !jsonObj.get("audioCodec").isJsonNull()) && !jsonObj.get("audioCodec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioCodec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioCodec").toString()));
      }
      if (!jsonObj.get("aspectRatio").isJsonNull() && (jsonObj.get("aspectRatio") != null && !jsonObj.get("aspectRatio").isJsonNull()) && !jsonObj.get("aspectRatio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspectRatio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspectRatio").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoStatusEncodingMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoStatusEncodingMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoStatusEncodingMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoStatusEncodingMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoStatusEncodingMetadata>() {
           @Override
           public void write(JsonWriter out, VideoStatusEncodingMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoStatusEncodingMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoStatusEncodingMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoStatusEncodingMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoStatusEncodingMetadata
  * @throws IOException if the JSON string is invalid with respect to VideoStatusEncodingMetadata
  */
  public static VideoStatusEncodingMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoStatusEncodingMetadata.class);
  }

 /**
  * Convert an instance of VideoStatusEncodingMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

