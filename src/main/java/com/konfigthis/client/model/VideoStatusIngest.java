/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BytesRange;
import com.konfigthis.client.model.VideoStatusIngestReceivedParts;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details about the capturing, transferring, and storing of your video for use immediately or in the future.
 */
@ApiModel(description = "Details about the capturing, transferring, and storing of your video for use immediately or in the future.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoStatusIngest {
  /**
   * There are four possible statuses depending on how you provide a video file: - &#x60;uploading&#x60; - the API is gathering the video source file from an upload. - &#x60;uploaded&#x60; - the video file is fully uploaded. - &#x60;ingesting&#x60; - the API is gathering the video source file from either a URL, or from cloning. - &#x60;ingested&#x60; - the video file is fully stored. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    UPLOADING("uploading"),
    
    UPLOADED("uploaded"),
    
    INGESTING("ingesting"),
    
    INGESTED("ingested");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private Integer filesize;

  public static final String SERIALIZED_NAME_RECEIVED_BYTES = "receivedBytes";
  @SerializedName(SERIALIZED_NAME_RECEIVED_BYTES)
  private List<BytesRange> receivedBytes = null;

  public static final String SERIALIZED_NAME_RECEIVED_PARTS = "receivedParts";
  @SerializedName(SERIALIZED_NAME_RECEIVED_PARTS)
  private VideoStatusIngestReceivedParts receivedParts;

  public VideoStatusIngest() {
  }

  public VideoStatusIngest status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * There are four possible statuses depending on how you provide a video file: - &#x60;uploading&#x60; - the API is gathering the video source file from an upload. - &#x60;uploaded&#x60; - the video file is fully uploaded. - &#x60;ingesting&#x60; - the API is gathering the video source file from either a URL, or from cloning. - &#x60;ingested&#x60; - the video file is fully stored. 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UPLOADED", value = "There are four possible statuses depending on how you provide a video file: - `uploading` - the API is gathering the video source file from an upload. - `uploaded` - the video file is fully uploaded. - `ingesting` - the API is gathering the video source file from either a URL, or from cloning. - `ingested` - the video file is fully stored. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public VideoStatusIngest filesize(Integer filesize) {
    
    
    
    
    this.filesize = filesize;
    return this;
  }

   /**
   * The size of your file in bytes.
   * @return filesize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200000", value = "The size of your file in bytes.")

  public Integer getFilesize() {
    return filesize;
  }


  public void setFilesize(Integer filesize) {
    
    
    
    this.filesize = filesize;
  }


  public VideoStatusIngest receivedBytes(List<BytesRange> receivedBytes) {
    
    
    
    
    this.receivedBytes = receivedBytes;
    return this;
  }

  public VideoStatusIngest addReceivedBytesItem(BytesRange receivedBytesItem) {
    if (this.receivedBytes == null) {
      this.receivedBytes = new ArrayList<>();
    }
    this.receivedBytes.add(receivedBytesItem);
    return this;
  }

   /**
   * The total number of bytes received, listed for each chunk of the upload.
   * @return receivedBytes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of bytes received, listed for each chunk of the upload.")

  public List<BytesRange> getReceivedBytes() {
    return receivedBytes;
  }


  public void setReceivedBytes(List<BytesRange> receivedBytes) {
    
    
    
    this.receivedBytes = receivedBytes;
  }


  public VideoStatusIngest receivedParts(VideoStatusIngestReceivedParts receivedParts) {
    
    
    
    
    this.receivedParts = receivedParts;
    return this;
  }

   /**
   * Get receivedParts
   * @return receivedParts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VideoStatusIngestReceivedParts getReceivedParts() {
    return receivedParts;
  }


  public void setReceivedParts(VideoStatusIngestReceivedParts receivedParts) {
    
    
    
    this.receivedParts = receivedParts;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoStatusIngest instance itself
   */
  public VideoStatusIngest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoStatusIngest videoStatusIngest = (VideoStatusIngest) o;
    return Objects.equals(this.status, videoStatusIngest.status) &&
        Objects.equals(this.filesize, videoStatusIngest.filesize) &&
        Objects.equals(this.receivedBytes, videoStatusIngest.receivedBytes) &&
        Objects.equals(this.receivedParts, videoStatusIngest.receivedParts)&&
        Objects.equals(this.additionalProperties, videoStatusIngest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, filesize, receivedBytes, receivedParts, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoStatusIngest {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    receivedBytes: ").append(toIndentedString(receivedBytes)).append("\n");
    sb.append("    receivedParts: ").append(toIndentedString(receivedParts)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("filesize");
    openapiFields.add("receivedBytes");
    openapiFields.add("receivedParts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoStatusIngest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoStatusIngest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoStatusIngest is not found in the empty JSON string", VideoStatusIngest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("receivedBytes") != null && !jsonObj.get("receivedBytes").isJsonNull()) {
        JsonArray jsonArrayreceivedBytes = jsonObj.getAsJsonArray("receivedBytes");
        if (jsonArrayreceivedBytes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("receivedBytes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `receivedBytes` to be an array in the JSON string but got `%s`", jsonObj.get("receivedBytes").toString()));
          }

          // validate the optional field `receivedBytes` (array)
          for (int i = 0; i < jsonArrayreceivedBytes.size(); i++) {
            BytesRange.validateJsonObject(jsonArrayreceivedBytes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `receivedParts`
      if (jsonObj.get("receivedParts") != null && !jsonObj.get("receivedParts").isJsonNull()) {
        VideoStatusIngestReceivedParts.validateJsonObject(jsonObj.getAsJsonObject("receivedParts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoStatusIngest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoStatusIngest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoStatusIngest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoStatusIngest.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoStatusIngest>() {
           @Override
           public void write(JsonWriter out, VideoStatusIngest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoStatusIngest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoStatusIngest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoStatusIngest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoStatusIngest
  * @throws IOException if the JSON string is invalid with respect to VideoStatusIngest
  */
  public static VideoStatusIngest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoStatusIngest.class);
  }

 /**
  * Convert an instance of VideoStatusIngest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

