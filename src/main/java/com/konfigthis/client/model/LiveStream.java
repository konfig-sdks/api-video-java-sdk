/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LiveStreamAssets;
import com.konfigthis.client.model.RestreamsResponseObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LiveStream
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveStream {
  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "liveStreamId";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  private String liveStreamId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STREAM_KEY = "streamKey";
  @SerializedName(SERIALIZED_NAME_STREAM_KEY)
  private String streamKey;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private LiveStreamAssets assets;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_BROADCASTING = "broadcasting";
  @SerializedName(SERIALIZED_NAME_BROADCASTING)
  private Boolean broadcasting;

  public static final String SERIALIZED_NAME_RESTREAMS = "restreams";
  @SerializedName(SERIALIZED_NAME_RESTREAMS)
  private List<RestreamsResponseObject> restreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public LiveStream() {
  }

  public LiveStream liveStreamId(String liveStreamId) {
    
    
    
    
    this.liveStreamId = liveStreamId;
    return this;
  }

   /**
   * The unique identifier for the live stream. Live stream IDs begin with \&quot;li.\&quot;
   * @return liveStreamId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "li400mYKSgQ6xs7taUeSaEKr", required = true, value = "The unique identifier for the live stream. Live stream IDs begin with \"li.\"")

  public String getLiveStreamId() {
    return liveStreamId;
  }


  public void setLiveStreamId(String liveStreamId) {
    
    
    
    this.liveStreamId = liveStreamId;
  }


  public LiveStream name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of your live stream.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Live Stream", value = "The name of your live stream.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public LiveStream streamKey(String streamKey) {
    
    
    
    
    this.streamKey = streamKey;
    return this;
  }

   /**
   * The unique, private stream key that you use to begin streaming.
   * @return streamKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dw-dew8-q6w9-k67w-1ws8", value = "The unique, private stream key that you use to begin streaming.")

  public String getStreamKey() {
    return streamKey;
  }


  public void setStreamKey(String streamKey) {
    
    
    
    this.streamKey = streamKey;
  }


  public LiveStream _public(Boolean _public) {
    
    
    
    
    this._public = _public;
    return this;
  }

   /**
   * Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Learn more about the Private Video feature [here](https://docs.api.video/delivery-analytics/video-privacy-access-management).
   * @return _public
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Learn more about the Private Video feature [here](https://docs.api.video/delivery-analytics/video-privacy-access-management).")

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    
    
    
    this._public = _public;
  }


  public LiveStream assets(LiveStreamAssets assets) {
    
    
    
    
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveStreamAssets getAssets() {
    return assets;
  }


  public void setAssets(LiveStreamAssets assets) {
    
    
    
    this.assets = assets;
  }


  public LiveStream playerId(String playerId) {
    
    
    
    
    this.playerId = playerId;
    return this;
  }

   /**
   * The unique identifier for the player.
   * @return playerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pl45d5vFFGrfdsdsd156dGhh", value = "The unique identifier for the player.")

  public String getPlayerId() {
    return playerId;
  }


  public void setPlayerId(String playerId) {
    
    
    
    this.playerId = playerId;
  }


  public LiveStream broadcasting(Boolean broadcasting) {
    
    
    
    
    this.broadcasting = broadcasting;
    return this;
  }

   /**
   * Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.
   * @return broadcasting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.")

  public Boolean getBroadcasting() {
    return broadcasting;
  }


  public void setBroadcasting(Boolean broadcasting) {
    
    
    
    this.broadcasting = broadcasting;
  }


  public LiveStream restreams(List<RestreamsResponseObject> restreams) {
    
    
    
    
    this.restreams = restreams;
    return this;
  }

  public LiveStream addRestreamsItem(RestreamsResponseObject restreamsItem) {
    this.restreams.add(restreamsItem);
    return this;
  }

   /**
   * Returns the list of RTMP restream destinations.
   * @return restreams
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Returns the list of RTMP restream destinations.")

  public List<RestreamsResponseObject> getRestreams() {
    return restreams;
  }


  public void setRestreams(List<RestreamsResponseObject> restreams) {
    
    
    
    this.restreams = restreams;
  }


  public LiveStream createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the player was created, presented in ISO-8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-31T10:17:47Z", value = "When the player was created, presented in ISO-8601 format.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public LiveStream updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * When the player was last updated, presented in ISO-8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-31T10:18:47Z", value = "When the player was last updated, presented in ISO-8601 format.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveStream instance itself
   */
  public LiveStream putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStream liveStream = (LiveStream) o;
    return Objects.equals(this.liveStreamId, liveStream.liveStreamId) &&
        Objects.equals(this.name, liveStream.name) &&
        Objects.equals(this.streamKey, liveStream.streamKey) &&
        Objects.equals(this._public, liveStream._public) &&
        Objects.equals(this.assets, liveStream.assets) &&
        Objects.equals(this.playerId, liveStream.playerId) &&
        Objects.equals(this.broadcasting, liveStream.broadcasting) &&
        Objects.equals(this.restreams, liveStream.restreams) &&
        Objects.equals(this.createdAt, liveStream.createdAt) &&
        Objects.equals(this.updatedAt, liveStream.updatedAt)&&
        Objects.equals(this.additionalProperties, liveStream.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(liveStreamId, name, streamKey, _public, assets, playerId, broadcasting, restreams, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStream {\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    streamKey: ").append(toIndentedString(streamKey)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    broadcasting: ").append(toIndentedString(broadcasting)).append("\n");
    sb.append("    restreams: ").append(toIndentedString(restreams)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("liveStreamId");
    openapiFields.add("name");
    openapiFields.add("streamKey");
    openapiFields.add("public");
    openapiFields.add("assets");
    openapiFields.add("playerId");
    openapiFields.add("broadcasting");
    openapiFields.add("restreams");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("liveStreamId");
    openapiRequiredFields.add("restreams");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveStream
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStream is not found in the empty JSON string", LiveStream.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveStream.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("liveStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveStreamId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("streamKey") != null && !jsonObj.get("streamKey").isJsonNull()) && !jsonObj.get("streamKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamKey").toString()));
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        LiveStreamAssets.validateJsonObject(jsonObj.getAsJsonObject("assets"));
      }
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("restreams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restreams` to be an array in the JSON string but got `%s`", jsonObj.get("restreams").toString()));
      }

      JsonArray jsonArrayrestreams = jsonObj.getAsJsonArray("restreams");
      // validate the required field `restreams` (array)
      for (int i = 0; i < jsonArrayrestreams.size(); i++) {
        RestreamsResponseObject.validateJsonObject(jsonArrayrestreams.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStream.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStream>() {
           @Override
           public void write(JsonWriter out, LiveStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStream read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveStream instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveStream given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveStream
  * @throws IOException if the JSON string is invalid with respect to LiveStream
  */
  public static LiveStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStream.class);
  }

 /**
  * Convert an instance of LiveStream to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

