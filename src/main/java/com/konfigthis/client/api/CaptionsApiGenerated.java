/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Caption;
import com.konfigthis.client.model.CaptionsListResponse;
import com.konfigthis.client.model.CaptionsUpdatePayload;
import com.konfigthis.client.model.CaptionsUploadPayload;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaptionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaptionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaptionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteByLanguageCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/captions/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByLanguageValidateBeforeCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteByLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling deleteByLanguage(Async)");
        }

        return deleteByLanguageCall(videoId, language, _callback);

    }


    private ApiResponse<Void> deleteByLanguageWithHttpInfo(String videoId, String language) throws ApiException {
        okhttp3.Call localVarCall = deleteByLanguageValidateBeforeCall(videoId, language, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByLanguageAsync(String videoId, String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByLanguageValidateBeforeCall(videoId, language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByLanguageRequestBuilder {
        private final String videoId;
        private final String language;

        private DeleteByLanguageRequestBuilder(String videoId, String language) {
            this.videoId = videoId;
            this.language = language;
        }

        /**
         * Build call for deleteByLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByLanguageCall(videoId, language, _callback);
        }


        /**
         * Execute deleteByLanguage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByLanguageWithHttpInfo(videoId, language);
        }

        /**
         * Execute deleteByLanguage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByLanguageWithHttpInfo(videoId, language);
        }

        /**
         * Execute deleteByLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByLanguageAsync(videoId, language, _callback);
        }
    }

    /**
     * Delete a caption
     * Delete a caption in a specific language by by video id.
     * @param videoId The unique identifier for the video you want to delete a caption from. (required)
     * @param language A valid language identifier using IETF language tags. You can use primary subtags like &#x60;en&#x60; (English), extended subtags like &#x60;fr-CA&#x60; (French, Canada), or region subtags like &#x60;zh-Hans-CN&#x60; (Simplified Chinese used in the PRC).  - This parameter **only accepts dashes for separators**, for example &#x60;fr-CA&#x60;. If you use a different separator in your request, the API returns an error. - When the value in your request does not match any covered language, the API returns an error. - You can find the list of supported tags [here](https://docs.api.video/vod/add-captions#supported-caption-language-tags). (required)
     * @return DeleteByLanguageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByLanguageRequestBuilder deleteByLanguage(String videoId, String language) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        return new DeleteByLanguageRequestBuilder(videoId, language);
    }
    private okhttp3.Call getByLanguageCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/captions/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByLanguageValidateBeforeCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getByLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getByLanguage(Async)");
        }

        return getByLanguageCall(videoId, language, _callback);

    }


    private ApiResponse<Caption> getByLanguageWithHttpInfo(String videoId, String language) throws ApiException {
        okhttp3.Call localVarCall = getByLanguageValidateBeforeCall(videoId, language, null);
        Type localVarReturnType = new TypeToken<Caption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByLanguageAsync(String videoId, String language, final ApiCallback<Caption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByLanguageValidateBeforeCall(videoId, language, _callback);
        Type localVarReturnType = new TypeToken<Caption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByLanguageRequestBuilder {
        private final String videoId;
        private final String language;

        private GetByLanguageRequestBuilder(String videoId, String language) {
            this.videoId = videoId;
            this.language = language;
        }

        /**
         * Build call for getByLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByLanguageCall(videoId, language, _callback);
        }


        /**
         * Execute getByLanguage request
         * @return Caption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Caption execute() throws ApiException {
            ApiResponse<Caption> localVarResp = getByLanguageWithHttpInfo(videoId, language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByLanguage request with HTTP info returned
         * @return ApiResponse&lt;Caption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Caption> executeWithHttpInfo() throws ApiException {
            return getByLanguageWithHttpInfo(videoId, language);
        }

        /**
         * Execute getByLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Caption> _callback) throws ApiException {
            return getByLanguageAsync(videoId, language, _callback);
        }
    }

    /**
     * Retrieve a caption
     * Retrieve a caption for a video in a specific language.
     * @param videoId The unique identifier for the video you want captions for. (required)
     * @param language A valid language identifier using IETF language tags. You can use primary subtags like &#x60;en&#x60; (English), extended subtags like &#x60;fr-CA&#x60; (French, Canada), or region subtags like &#x60;zh-Hans-CN&#x60; (Simplified Chinese used in the PRC).  - This parameter **only accepts dashes for separators**, for example &#x60;fr-CA&#x60;. If you use a different separator in your request, the API returns an error. - When the value in your request does not match any covered language, the API returns an error. - You can find the list of supported tags [here](https://docs.api.video/vod/add-captions#supported-caption-language-tags). (required)
     * @return GetByLanguageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByLanguageRequestBuilder getByLanguage(String videoId, String language) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        return new GetByLanguageRequestBuilder(videoId, language);
    }
    private okhttp3.Call listByVideoIdCall(String videoId, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/captions"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByVideoIdValidateBeforeCall(String videoId, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling listByVideoId(Async)");
        }

        return listByVideoIdCall(videoId, currentPage, pageSize, _callback);

    }


    private ApiResponse<CaptionsListResponse> listByVideoIdWithHttpInfo(String videoId, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listByVideoIdValidateBeforeCall(videoId, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<CaptionsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByVideoIdAsync(String videoId, Integer currentPage, Integer pageSize, final ApiCallback<CaptionsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByVideoIdValidateBeforeCall(videoId, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<CaptionsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByVideoIdRequestBuilder {
        private final String videoId;
        private Integer currentPage;
        private Integer pageSize;

        private ListByVideoIdRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return ListByVideoIdRequestBuilder
         */
        public ListByVideoIdRequestBuilder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return ListByVideoIdRequestBuilder
         */
        public ListByVideoIdRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listByVideoId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByVideoIdCall(videoId, currentPage, pageSize, _callback);
        }


        /**
         * Execute listByVideoId request
         * @return CaptionsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaptionsListResponse execute() throws ApiException {
            ApiResponse<CaptionsListResponse> localVarResp = listByVideoIdWithHttpInfo(videoId, currentPage, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByVideoId request with HTTP info returned
         * @return ApiResponse&lt;CaptionsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaptionsListResponse> executeWithHttpInfo() throws ApiException {
            return listByVideoIdWithHttpInfo(videoId, currentPage, pageSize);
        }

        /**
         * Execute listByVideoId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaptionsListResponse> _callback) throws ApiException {
            return listByVideoIdAsync(videoId, currentPage, pageSize, _callback);
        }
    }

    /**
     * List video captions
     * Retrieve a list of available captions by video id.
     * @param videoId The unique identifier for the video you want to retrieve a list of captions for. (required)
     * @return ListByVideoIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListByVideoIdRequestBuilder listByVideoId(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new ListByVideoIdRequestBuilder(videoId);
    }
    private okhttp3.Call updateSettingsCall(String videoId, String language, CaptionsUpdatePayload captionsUpdatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = captionsUpdatePayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/captions/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(String videoId, String language, CaptionsUpdatePayload captionsUpdatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateSettings(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling updateSettings(Async)");
        }

        // verify the required parameter 'captionsUpdatePayload' is set
        if (captionsUpdatePayload == null) {
            throw new ApiException("Missing the required parameter 'captionsUpdatePayload' when calling updateSettings(Async)");
        }

        return updateSettingsCall(videoId, language, captionsUpdatePayload, _callback);

    }


    private ApiResponse<Caption> updateSettingsWithHttpInfo(String videoId, String language, CaptionsUpdatePayload captionsUpdatePayload) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(videoId, language, captionsUpdatePayload, null);
        Type localVarReturnType = new TypeToken<Caption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(String videoId, String language, CaptionsUpdatePayload captionsUpdatePayload, final ApiCallback<Caption> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(videoId, language, captionsUpdatePayload, _callback);
        Type localVarReturnType = new TypeToken<Caption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final String videoId;
        private final String language;
        private Boolean _default;

        private UpdateSettingsRequestBuilder(String videoId, String language) {
            this.videoId = videoId;
            this.language = language;
        }

        /**
         * Set _default
         * @param _default  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CaptionsUpdatePayload captionsUpdatePayload = buildBodyParams();
            return updateSettingsCall(videoId, language, captionsUpdatePayload, _callback);
        }

        private CaptionsUpdatePayload buildBodyParams() {
            CaptionsUpdatePayload captionsUpdatePayload = new CaptionsUpdatePayload();
            captionsUpdatePayload._default(this._default);
            return captionsUpdatePayload;
        }

        /**
         * Execute updateSettings request
         * @return Caption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Caption execute() throws ApiException {
            CaptionsUpdatePayload captionsUpdatePayload = buildBodyParams();
            ApiResponse<Caption> localVarResp = updateSettingsWithHttpInfo(videoId, language, captionsUpdatePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;Caption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Caption> executeWithHttpInfo() throws ApiException {
            CaptionsUpdatePayload captionsUpdatePayload = buildBodyParams();
            return updateSettingsWithHttpInfo(videoId, language, captionsUpdatePayload);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Caption> _callback) throws ApiException {
            CaptionsUpdatePayload captionsUpdatePayload = buildBodyParams();
            return updateSettingsAsync(videoId, language, captionsUpdatePayload, _callback);
        }
    }

    /**
     * Update a caption
     * Update caption settings.
     * @param videoId The unique identifier for the video you want to have automatic captions for. (required)
     * @param language A valid language identifier using IETF language tags. You can use primary subtags like &#x60;en&#x60; (English), extended subtags like &#x60;fr-CA&#x60; (French, Canada), or region subtags like &#x60;zh-Hans-CN&#x60; (Simplified Chinese used in the PRC).  - This parameter **only accepts dashes for separators**, for example &#x60;fr-CA&#x60;. If you use a different separator in your request, the API returns an error. - When the value in your request does not match any covered language, the API returns an error. - You can find the list of supported tags [here](https://docs.api.video/vod/add-captions#supported-caption-language-tags). (required)
     * @param captionsUpdatePayload  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(String videoId, String language) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        return new UpdateSettingsRequestBuilder(videoId, language);
    }
    private okhttp3.Call uploadVttFileCall(String videoId, String language, File _file, CaptionsUploadPayload captionsUploadPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = captionsUploadPayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/captions/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadVttFileValidateBeforeCall(String videoId, String language, File _file, CaptionsUploadPayload captionsUploadPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling uploadVttFile(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling uploadVttFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadVttFile(Async)");
        }

        // verify the required parameter 'captionsUploadPayload' is set
        if (captionsUploadPayload == null) {
            throw new ApiException("Missing the required parameter 'captionsUploadPayload' when calling uploadVttFile(Async)");
        }

        return uploadVttFileCall(videoId, language, _file, captionsUploadPayload, _callback);

    }


    private ApiResponse<Caption> uploadVttFileWithHttpInfo(String videoId, String language, File _file, CaptionsUploadPayload captionsUploadPayload) throws ApiException {
        okhttp3.Call localVarCall = uploadVttFileValidateBeforeCall(videoId, language, _file, captionsUploadPayload, null);
        Type localVarReturnType = new TypeToken<Caption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadVttFileAsync(String videoId, String language, File _file, CaptionsUploadPayload captionsUploadPayload, final ApiCallback<Caption> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadVttFileValidateBeforeCall(videoId, language, _file, captionsUploadPayload, _callback);
        Type localVarReturnType = new TypeToken<Caption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadVttFileRequestBuilder {
        private final String videoId;
        private final String language;
        private final File _file;

        private UploadVttFileRequestBuilder(String videoId, String language, File _file) {
            this.videoId = videoId;
            this.language = language;
            this._file = _file;
        }

        /**
         * Build call for uploadVttFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CaptionsUploadPayload captionsUploadPayload = buildBodyParams();
            return uploadVttFileCall(videoId, language, _file, captionsUploadPayload, _callback);
        }

        private CaptionsUploadPayload buildBodyParams() {
            CaptionsUploadPayload captionsUploadPayload = new CaptionsUploadPayload();
            captionsUploadPayload._file(this._file);
            return captionsUploadPayload;
        }

        /**
         * Execute uploadVttFile request
         * @return Caption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Caption execute() throws ApiException {
            CaptionsUploadPayload captionsUploadPayload = buildBodyParams();
            ApiResponse<Caption> localVarResp = uploadVttFileWithHttpInfo(videoId, language, _file, captionsUploadPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadVttFile request with HTTP info returned
         * @return ApiResponse&lt;Caption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Caption> executeWithHttpInfo() throws ApiException {
            CaptionsUploadPayload captionsUploadPayload = buildBodyParams();
            return uploadVttFileWithHttpInfo(videoId, language, _file, captionsUploadPayload);
        }

        /**
         * Execute uploadVttFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Caption> _callback) throws ApiException {
            CaptionsUploadPayload captionsUploadPayload = buildBodyParams();
            return uploadVttFileAsync(videoId, language, _file, captionsUploadPayload, _callback);
        }
    }

    /**
     * Upload a caption
     * Upload a VTT file to add captions to your video. More information can be found [here](https://docs.api.video/vod/add-captions)
     * @param videoId The unique identifier for the video you want to add a caption to. (required)
     * @param language A valid language identifier using IETF language tags. You can use primary subtags like &#x60;en&#x60; (English), extended subtags like &#x60;fr-CA&#x60; (French, Canada), or region subtags like &#x60;zh-Hans-CN&#x60; (Simplified Chinese used in the PRC).  - This parameter **only accepts dashes for separators**, for example &#x60;fr-CA&#x60;. If you use a different separator in your request, the API returns an error. - When the value in your request does not match any covered language, the API returns an error. - You can find the list of supported tags [here](https://docs.api.video/vod/add-captions#supported-caption-language-tags). (required)
     * @param _file The video text track (VTT) you want to upload. (required)
     * @param captionsUploadPayload  (required)
     * @return UploadVttFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UploadVttFileRequestBuilder uploadVttFile(String videoId, String language, File _file) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadVttFileRequestBuilder(videoId, language, _file);
    }
}
