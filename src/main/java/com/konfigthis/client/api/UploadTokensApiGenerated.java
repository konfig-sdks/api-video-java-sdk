/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TokenCreationPayload;
import com.konfigthis.client.model.TokenListResponse;
import com.konfigthis.client.model.UploadToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UploadTokensApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadTokensApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UploadTokensApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteTokenCall(String uploadToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/upload-tokens/{uploadToken}"
            .replace("{" + "uploadToken" + "}", localVarApiClient.escapeString(uploadToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTokenValidateBeforeCall(String uploadToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadToken' is set
        if (uploadToken == null) {
            throw new ApiException("Missing the required parameter 'uploadToken' when calling deleteToken(Async)");
        }

        return deleteTokenCall(uploadToken, _callback);

    }


    private ApiResponse<Void> deleteTokenWithHttpInfo(String uploadToken) throws ApiException {
        okhttp3.Call localVarCall = deleteTokenValidateBeforeCall(uploadToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTokenAsync(String uploadToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTokenValidateBeforeCall(uploadToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTokenRequestBuilder {
        private final String uploadToken;

        private DeleteTokenRequestBuilder(String uploadToken) {
            this.uploadToken = uploadToken;
        }

        /**
         * Build call for deleteToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTokenCall(uploadToken, _callback);
        }


        /**
         * Execute deleteToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTokenWithHttpInfo(uploadToken);
        }

        /**
         * Execute deleteToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTokenWithHttpInfo(uploadToken);
        }

        /**
         * Execute deleteToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTokenAsync(uploadToken, _callback);
        }
    }

    /**
     * Delete an upload token
     * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
     * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication. (required)
     * @return DeleteTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTokenRequestBuilder deleteToken(String uploadToken) throws IllegalArgumentException {
        if (uploadToken == null) throw new IllegalArgumentException("\"uploadToken\" is required but got null");
            

        return new DeleteTokenRequestBuilder(uploadToken);
    }
    private okhttp3.Call generateTokenCall(TokenCreationPayload tokenCreationPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenCreationPayload;

        // create path and map variables
        String localVarPath = "/upload-tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTokenValidateBeforeCall(TokenCreationPayload tokenCreationPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenCreationPayload' is set
        if (tokenCreationPayload == null) {
            throw new ApiException("Missing the required parameter 'tokenCreationPayload' when calling generateToken(Async)");
        }

        return generateTokenCall(tokenCreationPayload, _callback);

    }


    private ApiResponse<UploadToken> generateTokenWithHttpInfo(TokenCreationPayload tokenCreationPayload) throws ApiException {
        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(tokenCreationPayload, null);
        Type localVarReturnType = new TypeToken<UploadToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateTokenAsync(TokenCreationPayload tokenCreationPayload, final ApiCallback<UploadToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(tokenCreationPayload, _callback);
        Type localVarReturnType = new TypeToken<UploadToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateTokenRequestBuilder {
        private Integer ttl;

        private GenerateTokenRequestBuilder() {
        }

        /**
         * Set ttl
         * @param ttl Time in seconds that the token will be active. A value of 0 means that the token has no exipration date. The default is to have no expiration. (optional, default to 0)
         * @return GenerateTokenRequestBuilder
         */
        public GenerateTokenRequestBuilder ttl(Integer ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for generateToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TokenCreationPayload tokenCreationPayload = buildBodyParams();
            return generateTokenCall(tokenCreationPayload, _callback);
        }

        private TokenCreationPayload buildBodyParams() {
            TokenCreationPayload tokenCreationPayload = new TokenCreationPayload();
            tokenCreationPayload.ttl(this.ttl);
            return tokenCreationPayload;
        }

        /**
         * Execute generateToken request
         * @return UploadToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UploadToken execute() throws ApiException {
            TokenCreationPayload tokenCreationPayload = buildBodyParams();
            ApiResponse<UploadToken> localVarResp = generateTokenWithHttpInfo(tokenCreationPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateToken request with HTTP info returned
         * @return ApiResponse&lt;UploadToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadToken> executeWithHttpInfo() throws ApiException {
            TokenCreationPayload tokenCreationPayload = buildBodyParams();
            return generateTokenWithHttpInfo(tokenCreationPayload);
        }

        /**
         * Execute generateToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadToken> _callback) throws ApiException {
            TokenCreationPayload tokenCreationPayload = buildBodyParams();
            return generateTokenAsync(tokenCreationPayload, _callback);
        }
    }

    /**
     * Generate an upload token
     * Generates an upload token that can be used to replace the API Key. More information can be found [here](https://docs.api.video/vod/delegated-upload-tokens)
     * @param tokenCreationPayload  (required)
     * @return GenerateTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenerateTokenRequestBuilder generateToken() throws IllegalArgumentException {
        return new GenerateTokenRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(String uploadToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/upload-tokens/{uploadToken}"
            .replace("{" + "uploadToken" + "}", localVarApiClient.escapeString(uploadToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String uploadToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadToken' is set
        if (uploadToken == null) {
            throw new ApiException("Missing the required parameter 'uploadToken' when calling getDetails(Async)");
        }

        return getDetailsCall(uploadToken, _callback);

    }


    private ApiResponse<UploadToken> getDetailsWithHttpInfo(String uploadToken) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(uploadToken, null);
        Type localVarReturnType = new TypeToken<UploadToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String uploadToken, final ApiCallback<UploadToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(uploadToken, _callback);
        Type localVarReturnType = new TypeToken<UploadToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String uploadToken;

        private GetDetailsRequestBuilder(String uploadToken) {
            this.uploadToken = uploadToken;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(uploadToken, _callback);
        }


        /**
         * Execute getDetails request
         * @return UploadToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UploadToken execute() throws ApiException {
            ApiResponse<UploadToken> localVarResp = getDetailsWithHttpInfo(uploadToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;UploadToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadToken> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(uploadToken);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadToken> _callback) throws ApiException {
            return getDetailsAsync(uploadToken, _callback);
        }
    }

    /**
     * Retrieve upload token
     * Retrieve details about a specific upload token by id.
     * @param uploadToken The unique identifier for the token you want information about. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String uploadToken) throws IllegalArgumentException {
        if (uploadToken == null) throw new IllegalArgumentException("\"uploadToken\" is required but got null");
            

        return new GetDetailsRequestBuilder(uploadToken);
    }
    private okhttp3.Call listActiveDelegatedTokensCall(String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/upload-tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActiveDelegatedTokensValidateBeforeCall(String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listActiveDelegatedTokensCall(sortBy, sortOrder, currentPage, pageSize, _callback);

    }


    private ApiResponse<TokenListResponse> listActiveDelegatedTokensWithHttpInfo(String sortBy, String sortOrder, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listActiveDelegatedTokensValidateBeforeCall(sortBy, sortOrder, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<TokenListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listActiveDelegatedTokensAsync(String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback<TokenListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActiveDelegatedTokensValidateBeforeCall(sortBy, sortOrder, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TokenListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListActiveDelegatedTokensRequestBuilder {
        private String sortBy;
        private String sortOrder;
        private Integer currentPage;
        private Integer pageSize;

        private ListActiveDelegatedTokensRequestBuilder() {
        }

        /**
         * Set sortBy
         * @param sortBy Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format. (optional)
         * @return ListActiveDelegatedTokensRequestBuilder
         */
        public ListActiveDelegatedTokensRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A. (optional)
         * @return ListActiveDelegatedTokensRequestBuilder
         */
        public ListActiveDelegatedTokensRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return ListActiveDelegatedTokensRequestBuilder
         */
        public ListActiveDelegatedTokensRequestBuilder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return ListActiveDelegatedTokensRequestBuilder
         */
        public ListActiveDelegatedTokensRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listActiveDelegatedTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActiveDelegatedTokensCall(sortBy, sortOrder, currentPage, pageSize, _callback);
        }


        /**
         * Execute listActiveDelegatedTokens request
         * @return TokenListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TokenListResponse execute() throws ApiException {
            ApiResponse<TokenListResponse> localVarResp = listActiveDelegatedTokensWithHttpInfo(sortBy, sortOrder, currentPage, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listActiveDelegatedTokens request with HTTP info returned
         * @return ApiResponse&lt;TokenListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenListResponse> executeWithHttpInfo() throws ApiException {
            return listActiveDelegatedTokensWithHttpInfo(sortBy, sortOrder, currentPage, pageSize);
        }

        /**
         * Execute listActiveDelegatedTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenListResponse> _callback) throws ApiException {
            return listActiveDelegatedTokensAsync(sortBy, sortOrder, currentPage, pageSize, _callback);
        }
    }

    /**
     * List all active upload tokens
     * Retrieve a list of all currently active delegated tokens.
     * @return ListActiveDelegatedTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListActiveDelegatedTokensRequestBuilder listActiveDelegatedTokens() throws IllegalArgumentException {
        return new ListActiveDelegatedTokensRequestBuilder();
    }
}
