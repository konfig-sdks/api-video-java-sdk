/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Chapter;
import com.konfigthis.client.model.ChaptersListResponse;
import com.konfigthis.client.model.ChaptersUpdatePayload;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChaptersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChaptersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChaptersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteChapterInLanguageCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/chapters/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChapterInLanguageValidateBeforeCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteChapterInLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling deleteChapterInLanguage(Async)");
        }

        return deleteChapterInLanguageCall(videoId, language, _callback);

    }


    private ApiResponse<Void> deleteChapterInLanguageWithHttpInfo(String videoId, String language) throws ApiException {
        okhttp3.Call localVarCall = deleteChapterInLanguageValidateBeforeCall(videoId, language, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteChapterInLanguageAsync(String videoId, String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChapterInLanguageValidateBeforeCall(videoId, language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteChapterInLanguageRequestBuilder {
        private final String videoId;
        private final String language;

        private DeleteChapterInLanguageRequestBuilder(String videoId, String language) {
            this.videoId = videoId;
            this.language = language;
        }

        /**
         * Build call for deleteChapterInLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChapterInLanguageCall(videoId, language, _callback);
        }


        /**
         * Execute deleteChapterInLanguage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteChapterInLanguageWithHttpInfo(videoId, language);
        }

        /**
         * Execute deleteChapterInLanguage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteChapterInLanguageWithHttpInfo(videoId, language);
        }

        /**
         * Execute deleteChapterInLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteChapterInLanguageAsync(videoId, language, _callback);
        }
    }

    /**
     * Delete a chapter
     * Delete a chapter in a specific language by providing the video ID for the video you want to delete the chapter from and the language the chapter is in.
     * @param videoId The unique identifier for the video you want to delete a chapter from. (required)
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation. (required)
     * @return DeleteChapterInLanguageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChapterInLanguageRequestBuilder deleteChapterInLanguage(String videoId, String language) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        return new DeleteChapterInLanguageRequestBuilder(videoId, language);
    }
    private okhttp3.Call getChapterByLanguageCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/chapters/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChapterByLanguageValidateBeforeCall(String videoId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getChapterByLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getChapterByLanguage(Async)");
        }

        return getChapterByLanguageCall(videoId, language, _callback);

    }


    private ApiResponse<Chapter> getChapterByLanguageWithHttpInfo(String videoId, String language) throws ApiException {
        okhttp3.Call localVarCall = getChapterByLanguageValidateBeforeCall(videoId, language, null);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChapterByLanguageAsync(String videoId, String language, final ApiCallback<Chapter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChapterByLanguageValidateBeforeCall(videoId, language, _callback);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChapterByLanguageRequestBuilder {
        private final String videoId;
        private final String language;

        private GetChapterByLanguageRequestBuilder(String videoId, String language) {
            this.videoId = videoId;
            this.language = language;
        }

        /**
         * Build call for getChapterByLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChapterByLanguageCall(videoId, language, _callback);
        }


        /**
         * Execute getChapterByLanguage request
         * @return Chapter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Chapter execute() throws ApiException {
            ApiResponse<Chapter> localVarResp = getChapterByLanguageWithHttpInfo(videoId, language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChapterByLanguage request with HTTP info returned
         * @return ApiResponse&lt;Chapter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Chapter> executeWithHttpInfo() throws ApiException {
            return getChapterByLanguageWithHttpInfo(videoId, language);
        }

        /**
         * Execute getChapterByLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Chapter> _callback) throws ApiException {
            return getChapterByLanguageAsync(videoId, language, _callback);
        }
    }

    /**
     * Retrieve a chapter
     * Retrieve a chapter for by video id in a specific language. 
     * @param videoId The unique identifier for the video you want to show a chapter for. (required)
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation. (required)
     * @return GetChapterByLanguageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChapterByLanguageRequestBuilder getChapterByLanguage(String videoId, String language) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        return new GetChapterByLanguageRequestBuilder(videoId, language);
    }
    private okhttp3.Call listByVideoCall(String videoId, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/chapters"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByVideoValidateBeforeCall(String videoId, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling listByVideo(Async)");
        }

        return listByVideoCall(videoId, currentPage, pageSize, _callback);

    }


    private ApiResponse<ChaptersListResponse> listByVideoWithHttpInfo(String videoId, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listByVideoValidateBeforeCall(videoId, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<ChaptersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByVideoAsync(String videoId, Integer currentPage, Integer pageSize, final ApiCallback<ChaptersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByVideoValidateBeforeCall(videoId, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ChaptersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByVideoRequestBuilder {
        private final String videoId;
        private Integer currentPage;
        private Integer pageSize;

        private ListByVideoRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return ListByVideoRequestBuilder
         */
        public ListByVideoRequestBuilder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return ListByVideoRequestBuilder
         */
        public ListByVideoRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listByVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByVideoCall(videoId, currentPage, pageSize, _callback);
        }


        /**
         * Execute listByVideo request
         * @return ChaptersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChaptersListResponse execute() throws ApiException {
            ApiResponse<ChaptersListResponse> localVarResp = listByVideoWithHttpInfo(videoId, currentPage, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByVideo request with HTTP info returned
         * @return ApiResponse&lt;ChaptersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChaptersListResponse> executeWithHttpInfo() throws ApiException {
            return listByVideoWithHttpInfo(videoId, currentPage, pageSize);
        }

        /**
         * Execute listByVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChaptersListResponse> _callback) throws ApiException {
            return listByVideoAsync(videoId, currentPage, pageSize, _callback);
        }
    }

    /**
     * List video chapters
     * Retrieve a list of all chapters for by video id.
     * @param videoId The unique identifier for the video you want to retrieve a list of chapters for. (required)
     * @return ListByVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListByVideoRequestBuilder listByVideo(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new ListByVideoRequestBuilder(videoId);
    }
    private okhttp3.Call uploadVttFileCall(String videoId, String language, File _file, ChaptersUpdatePayload chaptersUpdatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chaptersUpdatePayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/chapters/{language}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadVttFileValidateBeforeCall(String videoId, String language, File _file, ChaptersUpdatePayload chaptersUpdatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling uploadVttFile(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling uploadVttFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadVttFile(Async)");
        }

        // verify the required parameter 'chaptersUpdatePayload' is set
        if (chaptersUpdatePayload == null) {
            throw new ApiException("Missing the required parameter 'chaptersUpdatePayload' when calling uploadVttFile(Async)");
        }

        return uploadVttFileCall(videoId, language, _file, chaptersUpdatePayload, _callback);

    }


    private ApiResponse<Chapter> uploadVttFileWithHttpInfo(String videoId, String language, File _file, ChaptersUpdatePayload chaptersUpdatePayload) throws ApiException {
        okhttp3.Call localVarCall = uploadVttFileValidateBeforeCall(videoId, language, _file, chaptersUpdatePayload, null);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadVttFileAsync(String videoId, String language, File _file, ChaptersUpdatePayload chaptersUpdatePayload, final ApiCallback<Chapter> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadVttFileValidateBeforeCall(videoId, language, _file, chaptersUpdatePayload, _callback);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadVttFileRequestBuilder {
        private final String videoId;
        private final String language;
        private final File _file;

        private UploadVttFileRequestBuilder(String videoId, String language, File _file) {
            this.videoId = videoId;
            this.language = language;
            this._file = _file;
        }

        /**
         * Build call for uploadVttFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChaptersUpdatePayload chaptersUpdatePayload = buildBodyParams();
            return uploadVttFileCall(videoId, language, _file, chaptersUpdatePayload, _callback);
        }

        private ChaptersUpdatePayload buildBodyParams() {
            ChaptersUpdatePayload chaptersUpdatePayload = new ChaptersUpdatePayload();
            chaptersUpdatePayload._file(this._file);
            return chaptersUpdatePayload;
        }

        /**
         * Execute uploadVttFile request
         * @return Chapter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Chapter execute() throws ApiException {
            ChaptersUpdatePayload chaptersUpdatePayload = buildBodyParams();
            ApiResponse<Chapter> localVarResp = uploadVttFileWithHttpInfo(videoId, language, _file, chaptersUpdatePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadVttFile request with HTTP info returned
         * @return ApiResponse&lt;Chapter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Chapter> executeWithHttpInfo() throws ApiException {
            ChaptersUpdatePayload chaptersUpdatePayload = buildBodyParams();
            return uploadVttFileWithHttpInfo(videoId, language, _file, chaptersUpdatePayload);
        }

        /**
         * Execute uploadVttFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Chapter> _callback) throws ApiException {
            ChaptersUpdatePayload chaptersUpdatePayload = buildBodyParams();
            return uploadVttFileAsync(videoId, language, _file, chaptersUpdatePayload, _callback);
        }
    }

    /**
     * Upload a chapter
     * Upload a VTT file to add chapters to your video. Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos/) for more details.
     * @param videoId The unique identifier for the video you want to upload a chapter for. (required)
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation. (required)
     * @param _file The VTT file describing the chapters you want to upload. (required)
     * @param chaptersUpdatePayload  (required)
     * @return UploadVttFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UploadVttFileRequestBuilder uploadVttFile(String videoId, String language, File _file) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadVttFileRequestBuilder(videoId, language, _file);
    }
}
