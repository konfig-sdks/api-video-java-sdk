/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.Metadata;
import com.konfigthis.client.model.TokenUploadPayload;
import com.konfigthis.client.model.Video;
import com.konfigthis.client.model.VideoClip;
import com.konfigthis.client.model.VideoCreationPayload;
import com.konfigthis.client.model.VideoStatus;
import com.konfigthis.client.model.VideoThumbnailPickPayload;
import com.konfigthis.client.model.VideoThumbnailUploadPayload;
import com.konfigthis.client.model.VideoUpdatePayload;
import com.konfigthis.client.model.VideoUploadPayload;
import com.konfigthis.client.model.VideoWatermark;
import com.konfigthis.client.model.VideosListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createObjectCall(VideoCreationPayload videoCreationPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoCreationPayload;

        // create path and map variables
        String localVarPath = "/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createObjectValidateBeforeCall(VideoCreationPayload videoCreationPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoCreationPayload' is set
        if (videoCreationPayload == null) {
            throw new ApiException("Missing the required parameter 'videoCreationPayload' when calling createObject(Async)");
        }

        return createObjectCall(videoCreationPayload, _callback);

    }


    private ApiResponse<Video> createObjectWithHttpInfo(VideoCreationPayload videoCreationPayload) throws ApiException {
        okhttp3.Call localVarCall = createObjectValidateBeforeCall(videoCreationPayload, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createObjectAsync(VideoCreationPayload videoCreationPayload, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = createObjectValidateBeforeCall(videoCreationPayload, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateObjectRequestBuilder {
        private final String title;
        private List<String> tags;
        private String description;
        private String source;
        private Boolean _public;
        private Boolean panoramic;
        private Boolean mp4Support;
        private String playerId;
        private List<Metadata> metadata;
        private VideoClip clip;
        private VideoWatermark watermark;

        private CreateObjectRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set tags
         * @param tags A list of tags you want to use to describe your video. (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description A brief description of your video. (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set source
         * @param source You can either add a video already on the web, by entering the URL of the video, or you can also enter the &#x60;videoId&#x60; of one of the videos you already have on your api.video acccount, and this will generate a copy of your video. Creating a copy of a video can be especially useful if you want to keep your original video and trim or apply a watermark onto the copy you would create. (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Default: True. If set to &#x60;false&#x60; the video will become private. More information on private videos can be found [here](https://docs.api.video/delivery-analytics/video-privacy-access-management) (optional, default to true)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set panoramic
         * @param panoramic Indicates if your video is a 360/immersive video. (optional, default to false)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder panoramic(Boolean panoramic) {
            this.panoramic = panoramic;
            return this;
        }
        
        /**
         * Set mp4Support
         * @param mp4Support Enables mp4 version in addition to streamed version. (optional, default to true)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder mp4Support(Boolean mp4Support) {
            this.mp4Support = mp4Support;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId The unique identification number for your video player. (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder playerId(String playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata/). (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder metadata(List<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set clip
         * @param clip  (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder clip(VideoClip clip) {
            this.clip = clip;
            return this;
        }
        
        /**
         * Set watermark
         * @param watermark  (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder watermark(VideoWatermark watermark) {
            this.watermark = watermark;
            return this;
        }
        
        /**
         * Build call for createObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideoCreationPayload videoCreationPayload = buildBodyParams();
            return createObjectCall(videoCreationPayload, _callback);
        }

        private VideoCreationPayload buildBodyParams() {
            VideoCreationPayload videoCreationPayload = new VideoCreationPayload();
            videoCreationPayload.tags(this.tags);
            videoCreationPayload.title(this.title);
            videoCreationPayload.description(this.description);
            videoCreationPayload.source(this.source);
            videoCreationPayload._public(this._public);
            videoCreationPayload.panoramic(this.panoramic);
            videoCreationPayload.mp4Support(this.mp4Support);
            videoCreationPayload.playerId(this.playerId);
            videoCreationPayload.metadata(this.metadata);
            videoCreationPayload.clip(this.clip);
            videoCreationPayload.watermark(this.watermark);
            return videoCreationPayload;
        }

        /**
         * Execute createObject request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            VideoCreationPayload videoCreationPayload = buildBodyParams();
            ApiResponse<Video> localVarResp = createObjectWithHttpInfo(videoCreationPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createObject request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            VideoCreationPayload videoCreationPayload = buildBodyParams();
            return createObjectWithHttpInfo(videoCreationPayload);
        }

        /**
         * Execute createObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            VideoCreationPayload videoCreationPayload = buildBodyParams();
            return createObjectAsync(videoCreationPayload, _callback);
        }
    }

    /**
     * Create a video object
     * Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos). 
     * @param videoCreationPayload video to create (required)
     * @return CreateObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public CreateObjectRequestBuilder createObject(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateObjectRequestBuilder(title);
    }
    private okhttp3.Call deleteVideoObjectCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoObjectValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoObject(Async)");
        }

        return deleteVideoObjectCall(videoId, _callback);

    }


    private ApiResponse<Void> deleteVideoObjectWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoObjectValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteVideoObjectAsync(String videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoObjectValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteVideoObjectRequestBuilder {
        private final String videoId;

        private DeleteVideoObjectRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for deleteVideoObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteVideoObjectCall(videoId, _callback);
        }


        /**
         * Execute deleteVideoObject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteVideoObjectWithHttpInfo(videoId);
        }

        /**
         * Execute deleteVideoObject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteVideoObjectWithHttpInfo(videoId);
        }

        /**
         * Execute deleteVideoObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteVideoObjectAsync(videoId, _callback);
        }
    }

    /**
     * Delete a video object
     * Delete a video object by video ID.
     * @param videoId The video ID for the video you want to delete. (required)
     * @return DeleteVideoObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVideoObjectRequestBuilder deleteVideoObject(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new DeleteVideoObjectRequestBuilder(videoId);
    }
    private okhttp3.Call getVideoObjectCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoObjectValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoObject(Async)");
        }

        return getVideoObjectCall(videoId, _callback);

    }


    private ApiResponse<Video> getVideoObjectWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoObjectValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVideoObjectAsync(String videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoObjectValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVideoObjectRequestBuilder {
        private final String videoId;

        private GetVideoObjectRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for getVideoObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVideoObjectCall(videoId, _callback);
        }


        /**
         * Execute getVideoObject request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getVideoObjectWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVideoObject request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getVideoObjectWithHttpInfo(videoId);
        }

        /**
         * Execute getVideoObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getVideoObjectAsync(videoId, _callback);
        }
    }

    /**
     * Retrieve a video object
     * Retrieve the video details by video id.
     * @param videoId The unique identifier for the video you want details about. (required)
     * @return GetVideoObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetVideoObjectRequestBuilder getVideoObject(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new GetVideoObjectRequestBuilder(videoId);
    }
    private okhttp3.Call getVideoStatusAndDetailsCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/status"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoStatusAndDetailsValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoStatusAndDetails(Async)");
        }

        return getVideoStatusAndDetailsCall(videoId, _callback);

    }


    private ApiResponse<VideoStatus> getVideoStatusAndDetailsWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoStatusAndDetailsValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideoStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVideoStatusAndDetailsAsync(String videoId, final ApiCallback<VideoStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoStatusAndDetailsValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVideoStatusAndDetailsRequestBuilder {
        private final String videoId;

        private GetVideoStatusAndDetailsRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for getVideoStatusAndDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVideoStatusAndDetailsCall(videoId, _callback);
        }


        /**
         * Execute getVideoStatusAndDetails request
         * @return VideoStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public VideoStatus execute() throws ApiException {
            ApiResponse<VideoStatus> localVarResp = getVideoStatusAndDetailsWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVideoStatusAndDetails request with HTTP info returned
         * @return ApiResponse&lt;VideoStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoStatus> executeWithHttpInfo() throws ApiException {
            return getVideoStatusAndDetailsWithHttpInfo(videoId);
        }

        /**
         * Execute getVideoStatusAndDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoStatus> _callback) throws ApiException {
            return getVideoStatusAndDetailsAsync(videoId, _callback);
        }
    }

    /**
     * Retrieve video status and details
     * Retrieve upload status and encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
     * @param videoId The unique identifier for the video you want the status for. (required)
     * @return GetVideoStatusAndDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetVideoStatusAndDetailsRequestBuilder getVideoStatusAndDetails(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new GetVideoStatusAndDetailsRequestBuilder(videoId);
    }
    private okhttp3.Call ingestVideoFromSourceCall(String videoId, File _file, VideoUploadPayload videoUploadPayload, String contentRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoUploadPayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/source"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (contentRange != null) {
            localVarHeaderParams.put("Content-Range", localVarApiClient.parameterToString(contentRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingestVideoFromSourceValidateBeforeCall(String videoId, File _file, VideoUploadPayload videoUploadPayload, String contentRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling ingestVideoFromSource(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling ingestVideoFromSource(Async)");
        }

        // verify the required parameter 'videoUploadPayload' is set
        if (videoUploadPayload == null) {
            throw new ApiException("Missing the required parameter 'videoUploadPayload' when calling ingestVideoFromSource(Async)");
        }

        return ingestVideoFromSourceCall(videoId, _file, videoUploadPayload, contentRange, _callback);

    }


    private ApiResponse<Video> ingestVideoFromSourceWithHttpInfo(String videoId, File _file, VideoUploadPayload videoUploadPayload, String contentRange) throws ApiException {
        okhttp3.Call localVarCall = ingestVideoFromSourceValidateBeforeCall(videoId, _file, videoUploadPayload, contentRange, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call ingestVideoFromSourceAsync(String videoId, File _file, VideoUploadPayload videoUploadPayload, String contentRange, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingestVideoFromSourceValidateBeforeCall(videoId, _file, videoUploadPayload, contentRange, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class IngestVideoFromSourceRequestBuilder {
        private final String videoId;
        private final File _file;
        private String contentRange;

        private IngestVideoFromSourceRequestBuilder(String videoId, File _file) {
            this.videoId = videoId;
            this._file = _file;
        }

        /**
         * Set contentRange
         * @param contentRange &#x60;part &lt;part&gt;/&lt;total_parts&gt;&#x60; ; &#x60;bytes &lt;from_byte&gt;-&lt;to_byte&gt;/&lt;total_bytes&gt;&#x60; (optional)
         * @return IngestVideoFromSourceRequestBuilder
         */
        public IngestVideoFromSourceRequestBuilder contentRange(String contentRange) {
            this.contentRange = contentRange;
            return this;
        }
        
        /**
         * Build call for ingestVideoFromSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideoUploadPayload videoUploadPayload = buildBodyParams();
            return ingestVideoFromSourceCall(videoId, _file, videoUploadPayload, contentRange, _callback);
        }

        private VideoUploadPayload buildBodyParams() {
            VideoUploadPayload videoUploadPayload = new VideoUploadPayload();
            videoUploadPayload._file(this._file);
            return videoUploadPayload;
        }

        /**
         * Execute ingestVideoFromSource request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            VideoUploadPayload videoUploadPayload = buildBodyParams();
            ApiResponse<Video> localVarResp = ingestVideoFromSourceWithHttpInfo(videoId, _file, videoUploadPayload, contentRange);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute ingestVideoFromSource request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            VideoUploadPayload videoUploadPayload = buildBodyParams();
            return ingestVideoFromSourceWithHttpInfo(videoId, _file, videoUploadPayload, contentRange);
        }

        /**
         * Execute ingestVideoFromSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            VideoUploadPayload videoUploadPayload = buildBodyParams();
            return ingestVideoFromSourceAsync(videoId, _file, videoUploadPayload, contentRange, _callback);
        }
    }

    /**
     * Upload a video
     * Ingest a video from a source or file.
     * @param videoId Enter the videoId you want to use to upload your video. (required)
     * @param _file The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video. (required)
     * @param videoUploadPayload  (required)
     * @return IngestVideoFromSourceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IngestVideoFromSourceRequestBuilder ingestVideoFromSource(String videoId, File _file) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new IngestVideoFromSourceRequestBuilder(videoId, _file);
    }
    private okhttp3.Call listAllObjectsCall(String title, List<String> tags, Map<String, String> metadata, String description, String liveStreamId, String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags[]", tags));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (liveStreamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("liveStreamId", liveStreamId));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String title, List<String> tags, Map<String, String> metadata, String description, String liveStreamId, String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listAllObjectsCall(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, _callback);

    }


    private ApiResponse<VideosListResponse> listAllObjectsWithHttpInfo(String title, List<String> tags, Map<String, String> metadata, String description, String liveStreamId, String sortBy, String sortOrder, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<VideosListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String title, List<String> tags, Map<String, String> metadata, String description, String liveStreamId, String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback<VideosListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<VideosListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private String title;
        private List<String> tags;
        private Map<String, String> metadata;
        private String description;
        private String liveStreamId;
        private String sortBy;
        private String sortOrder;
        private Integer currentPage;
        private Integer pageSize;

        private ListAllObjectsRequestBuilder() {
        }

        /**
         * Set title
         * @param title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set tags
         * @param tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata/) allows you to define a key that allows any value pair. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set description
         * @param description Retrieve video objects by &#x60;description&#x60;. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set liveStreamId
         * @param liveStreamId Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder liveStreamId(String liveStreamId) {
            this.liveStreamId = liveStreamId;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Use this parameter to sort videos by the their created time, published time, updated time, or by title. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return VideosListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public VideosListResponse execute() throws ApiException {
            ApiResponse<VideosListResponse> localVarResp = listAllObjectsWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;VideosListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideosListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideosListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, _callback);
        }
    }

    /**
     * List all video objects
     * List all the video objects that are associated with the current workspace.
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects() throws IllegalArgumentException {
        return new ListAllObjectsRequestBuilder();
    }
    private okhttp3.Call setThumbnailFromIntervalCall(String videoId, VideoThumbnailPickPayload videoThumbnailPickPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoThumbnailPickPayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/thumbnail"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setThumbnailFromIntervalValidateBeforeCall(String videoId, VideoThumbnailPickPayload videoThumbnailPickPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling setThumbnailFromInterval(Async)");
        }

        // verify the required parameter 'videoThumbnailPickPayload' is set
        if (videoThumbnailPickPayload == null) {
            throw new ApiException("Missing the required parameter 'videoThumbnailPickPayload' when calling setThumbnailFromInterval(Async)");
        }

        return setThumbnailFromIntervalCall(videoId, videoThumbnailPickPayload, _callback);

    }


    private ApiResponse<Video> setThumbnailFromIntervalWithHttpInfo(String videoId, VideoThumbnailPickPayload videoThumbnailPickPayload) throws ApiException {
        okhttp3.Call localVarCall = setThumbnailFromIntervalValidateBeforeCall(videoId, videoThumbnailPickPayload, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setThumbnailFromIntervalAsync(String videoId, VideoThumbnailPickPayload videoThumbnailPickPayload, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = setThumbnailFromIntervalValidateBeforeCall(videoId, videoThumbnailPickPayload, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetThumbnailFromIntervalRequestBuilder {
        private final String timecode;
        private final String videoId;

        private SetThumbnailFromIntervalRequestBuilder(String timecode, String videoId) {
            this.timecode = timecode;
            this.videoId = videoId;
        }

        /**
         * Build call for setThumbnailFromInterval
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideoThumbnailPickPayload videoThumbnailPickPayload = buildBodyParams();
            return setThumbnailFromIntervalCall(videoId, videoThumbnailPickPayload, _callback);
        }

        private VideoThumbnailPickPayload buildBodyParams() {
            VideoThumbnailPickPayload videoThumbnailPickPayload = new VideoThumbnailPickPayload();
            videoThumbnailPickPayload.timecode(this.timecode);
            return videoThumbnailPickPayload;
        }

        /**
         * Execute setThumbnailFromInterval request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            VideoThumbnailPickPayload videoThumbnailPickPayload = buildBodyParams();
            ApiResponse<Video> localVarResp = setThumbnailFromIntervalWithHttpInfo(videoId, videoThumbnailPickPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setThumbnailFromInterval request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            VideoThumbnailPickPayload videoThumbnailPickPayload = buildBodyParams();
            return setThumbnailFromIntervalWithHttpInfo(videoId, videoThumbnailPickPayload);
        }

        /**
         * Execute setThumbnailFromInterval request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            VideoThumbnailPickPayload videoThumbnailPickPayload = buildBodyParams();
            return setThumbnailFromIntervalAsync(videoId, videoThumbnailPickPayload, _callback);
        }
    }

    /**
     * Set a thumbnail
     * Set a thumbnail from a specific time interval within a video.
     * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail. (required)
     * @param videoThumbnailPickPayload  (required)
     * @return SetThumbnailFromIntervalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SetThumbnailFromIntervalRequestBuilder setThumbnailFromInterval(String timecode, String videoId) throws IllegalArgumentException {
        if (timecode == null) throw new IllegalArgumentException("\"timecode\" is required but got null");
            

        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new SetThumbnailFromIntervalRequestBuilder(timecode, videoId);
    }
    private okhttp3.Call updateVideoObjectParametersCall(String videoId, VideoUpdatePayload videoUpdatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoUpdatePayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVideoObjectParametersValidateBeforeCall(String videoId, VideoUpdatePayload videoUpdatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateVideoObjectParameters(Async)");
        }

        // verify the required parameter 'videoUpdatePayload' is set
        if (videoUpdatePayload == null) {
            throw new ApiException("Missing the required parameter 'videoUpdatePayload' when calling updateVideoObjectParameters(Async)");
        }

        return updateVideoObjectParametersCall(videoId, videoUpdatePayload, _callback);

    }


    private ApiResponse<Video> updateVideoObjectParametersWithHttpInfo(String videoId, VideoUpdatePayload videoUpdatePayload) throws ApiException {
        okhttp3.Call localVarCall = updateVideoObjectParametersValidateBeforeCall(videoId, videoUpdatePayload, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateVideoObjectParametersAsync(String videoId, VideoUpdatePayload videoUpdatePayload, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVideoObjectParametersValidateBeforeCall(videoId, videoUpdatePayload, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateVideoObjectParametersRequestBuilder {
        private final String videoId;
        private List<String> tags;
        private String title;
        private String description;
        private String playerId;
        private Boolean _public;
        private Boolean panoramic;
        private Boolean mp4Support;
        private List<Metadata> metadata;

        private UpdateVideoObjectParametersRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Set tags
         * @param tags A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set title
         * @param title The title you want to use for your video. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description A brief description of the video. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId The unique ID for the player you want to associate with your video. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder playerId(String playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos/). (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set panoramic
         * @param panoramic Whether the video is a 360 degree or immersive video. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder panoramic(Boolean panoramic) {
            this.panoramic = panoramic;
            return this;
        }
        
        /**
         * Set mp4Support
         * @param mp4Support Whether the player supports the mp4 format. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder mp4Support(Boolean mp4Support) {
            this.mp4Support = mp4Support;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata/) allows you to define a key that allows any value pair. (optional)
         * @return UpdateVideoObjectParametersRequestBuilder
         */
        public UpdateVideoObjectParametersRequestBuilder metadata(List<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for updateVideoObjectParameters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideoUpdatePayload videoUpdatePayload = buildBodyParams();
            return updateVideoObjectParametersCall(videoId, videoUpdatePayload, _callback);
        }

        private VideoUpdatePayload buildBodyParams() {
            VideoUpdatePayload videoUpdatePayload = new VideoUpdatePayload();
            videoUpdatePayload.tags(this.tags);
            videoUpdatePayload.title(this.title);
            videoUpdatePayload.description(this.description);
            videoUpdatePayload.playerId(this.playerId);
            videoUpdatePayload._public(this._public);
            videoUpdatePayload.panoramic(this.panoramic);
            videoUpdatePayload.mp4Support(this.mp4Support);
            videoUpdatePayload.metadata(this.metadata);
            return videoUpdatePayload;
        }

        /**
         * Execute updateVideoObjectParameters request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            VideoUpdatePayload videoUpdatePayload = buildBodyParams();
            ApiResponse<Video> localVarResp = updateVideoObjectParametersWithHttpInfo(videoId, videoUpdatePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateVideoObjectParameters request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            VideoUpdatePayload videoUpdatePayload = buildBodyParams();
            return updateVideoObjectParametersWithHttpInfo(videoId, videoUpdatePayload);
        }

        /**
         * Execute updateVideoObjectParameters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            VideoUpdatePayload videoUpdatePayload = buildBodyParams();
            return updateVideoObjectParametersAsync(videoId, videoUpdatePayload, _callback);
        }
    }

    /**
     * Update a video object
     * Update the parameters associated with a video ID.
     * @param videoId The video ID for the video you want to update. (required)
     * @param videoUpdatePayload  (required)
     * @return UpdateVideoObjectParametersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVideoObjectParametersRequestBuilder updateVideoObjectParameters(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new UpdateVideoObjectParametersRequestBuilder(videoId);
    }
    private okhttp3.Call uploadCall(String token, File _file, TokenUploadPayload tokenUploadPayload, String contentRange, String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenUploadPayload;

        // create path and map variables
        String localVarPath = "/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (videoId != null) {
            localVarFormParams.put("videoId", videoId);
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (contentRange != null) {
            localVarHeaderParams.put("Content-Range", localVarApiClient.parameterToString(contentRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadValidateBeforeCall(String token, File _file, TokenUploadPayload tokenUploadPayload, String contentRange, String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling upload(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling upload(Async)");
        }

        // verify the required parameter 'tokenUploadPayload' is set
        if (tokenUploadPayload == null) {
            throw new ApiException("Missing the required parameter 'tokenUploadPayload' when calling upload(Async)");
        }

        return uploadCall(token, _file, tokenUploadPayload, contentRange, videoId, _callback);

    }


    private ApiResponse<Video> uploadWithHttpInfo(String token, File _file, TokenUploadPayload tokenUploadPayload, String contentRange, String videoId) throws ApiException {
        okhttp3.Call localVarCall = uploadValidateBeforeCall(token, _file, tokenUploadPayload, contentRange, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAsync(String token, File _file, TokenUploadPayload tokenUploadPayload, String contentRange, String videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadValidateBeforeCall(token, _file, tokenUploadPayload, contentRange, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadRequestBuilder {
        private final String token;
        private final File _file;
        private String contentRange;
        private String videoId;

        private UploadRequestBuilder(String token, File _file) {
            this.token = token;
            this._file = _file;
        }

        /**
         * Set contentRange
         * @param contentRange Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder contentRange(String contentRange) {
            this.contentRange = contentRange;
            return this;
        }
        
        /**
         * Set videoId
         * @param videoId The video id returned by the first call to this endpoint in a large video upload scenario. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder videoId(String videoId) {
            this.videoId = videoId;
            return this;
        }
        
        /**
         * Build call for upload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TokenUploadPayload tokenUploadPayload = buildBodyParams();
            return uploadCall(token, _file, tokenUploadPayload, contentRange, videoId, _callback);
        }

        private TokenUploadPayload buildBodyParams() {
            TokenUploadPayload tokenUploadPayload = new TokenUploadPayload();
            tokenUploadPayload._file(this._file);
            tokenUploadPayload.videoId(this.videoId);
            return tokenUploadPayload;
        }

        /**
         * Execute upload request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            TokenUploadPayload tokenUploadPayload = buildBodyParams();
            ApiResponse<Video> localVarResp = uploadWithHttpInfo(token, _file, tokenUploadPayload, contentRange, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute upload request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            TokenUploadPayload tokenUploadPayload = buildBodyParams();
            return uploadWithHttpInfo(token, _file, tokenUploadPayload, contentRange, videoId);
        }

        /**
         * Execute upload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            TokenUploadPayload tokenUploadPayload = buildBodyParams();
            return uploadAsync(token, _file, tokenUploadPayload, contentRange, videoId, _callback);
        }
    }

    /**
     * Upload with an delegated upload token
     * Uploading a video with the delegated upload token.
     * @param token The unique identifier for the token you want to use to upload a video. (required)
     * @param _file The path to the video you want to upload. (required)
     * @param tokenUploadPayload  (required)
     * @return UploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadRequestBuilder upload(String token, File _file) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadRequestBuilder(token, _file);
    }
    private okhttp3.Call uploadThumbnailCall(String videoId, File _file, VideoThumbnailUploadPayload videoThumbnailUploadPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoThumbnailUploadPayload;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/thumbnail"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadThumbnailValidateBeforeCall(String videoId, File _file, VideoThumbnailUploadPayload videoThumbnailUploadPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling uploadThumbnail(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadThumbnail(Async)");
        }

        // verify the required parameter 'videoThumbnailUploadPayload' is set
        if (videoThumbnailUploadPayload == null) {
            throw new ApiException("Missing the required parameter 'videoThumbnailUploadPayload' when calling uploadThumbnail(Async)");
        }

        return uploadThumbnailCall(videoId, _file, videoThumbnailUploadPayload, _callback);

    }


    private ApiResponse<Video> uploadThumbnailWithHttpInfo(String videoId, File _file, VideoThumbnailUploadPayload videoThumbnailUploadPayload) throws ApiException {
        okhttp3.Call localVarCall = uploadThumbnailValidateBeforeCall(videoId, _file, videoThumbnailUploadPayload, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadThumbnailAsync(String videoId, File _file, VideoThumbnailUploadPayload videoThumbnailUploadPayload, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadThumbnailValidateBeforeCall(videoId, _file, videoThumbnailUploadPayload, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadThumbnailRequestBuilder {
        private final String videoId;
        private final File _file;

        private UploadThumbnailRequestBuilder(String videoId, File _file) {
            this.videoId = videoId;
            this._file = _file;
        }

        /**
         * Build call for uploadThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideoThumbnailUploadPayload videoThumbnailUploadPayload = buildBodyParams();
            return uploadThumbnailCall(videoId, _file, videoThumbnailUploadPayload, _callback);
        }

        private VideoThumbnailUploadPayload buildBodyParams() {
            VideoThumbnailUploadPayload videoThumbnailUploadPayload = new VideoThumbnailUploadPayload();
            videoThumbnailUploadPayload._file(this._file);
            return videoThumbnailUploadPayload;
        }

        /**
         * Execute uploadThumbnail request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            VideoThumbnailUploadPayload videoThumbnailUploadPayload = buildBodyParams();
            ApiResponse<Video> localVarResp = uploadThumbnailWithHttpInfo(videoId, _file, videoThumbnailUploadPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            VideoThumbnailUploadPayload videoThumbnailUploadPayload = buildBodyParams();
            return uploadThumbnailWithHttpInfo(videoId, _file, videoThumbnailUploadPayload);
        }

        /**
         * Execute uploadThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            VideoThumbnailUploadPayload videoThumbnailUploadPayload = buildBodyParams();
            return uploadThumbnailAsync(videoId, _file, videoThumbnailUploadPayload, _callback);
        }
    }

    /**
     * Upload a thumbnail
     * Upload a thumbnail for a certain video.
     * @param videoId Unique identifier of the chosen video  (required)
     * @param _file The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB. (required)
     * @param videoThumbnailUploadPayload  (required)
     * @return UploadThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UploadThumbnailRequestBuilder uploadThumbnail(String videoId, File _file) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadThumbnailRequestBuilder(videoId, _file);
    }
}
