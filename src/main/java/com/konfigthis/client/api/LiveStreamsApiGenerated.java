/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.LiveStream;
import com.konfigthis.client.model.LiveStreamCreationPayload;
import com.konfigthis.client.model.LiveStreamListResponse;
import com.konfigthis.client.model.LiveStreamThumbnailUploadPayload;
import com.konfigthis.client.model.LiveStreamUpdatePayload;
import com.konfigthis.client.model.RestreamsRequestObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveStreamsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveStreamsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveStreamsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLivestreamObjectCall(LiveStreamCreationPayload liveStreamCreationPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveStreamCreationPayload;

        // create path and map variables
        String localVarPath = "/live-streams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLivestreamObjectValidateBeforeCall(LiveStreamCreationPayload liveStreamCreationPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamCreationPayload' is set
        if (liveStreamCreationPayload == null) {
            throw new ApiException("Missing the required parameter 'liveStreamCreationPayload' when calling createLivestreamObject(Async)");
        }

        return createLivestreamObjectCall(liveStreamCreationPayload, _callback);

    }


    private ApiResponse<LiveStream> createLivestreamObjectWithHttpInfo(LiveStreamCreationPayload liveStreamCreationPayload) throws ApiException {
        okhttp3.Call localVarCall = createLivestreamObjectValidateBeforeCall(liveStreamCreationPayload, null);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLivestreamObjectAsync(LiveStreamCreationPayload liveStreamCreationPayload, final ApiCallback<LiveStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLivestreamObjectValidateBeforeCall(liveStreamCreationPayload, _callback);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLivestreamObjectRequestBuilder {
        private final String name;
        private Boolean _public;
        private String playerId;
        private List<RestreamsRequestObject> restreams;

        private CreateLivestreamObjectRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set _public
         * @param _public Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Learn more about the Private Video feature [here](https://docs.api.video/delivery-analytics/video-privacy-access-management). (optional)
         * @return CreateLivestreamObjectRequestBuilder
         */
        public CreateLivestreamObjectRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId The unique identifier for the player. (optional)
         * @return CreateLivestreamObjectRequestBuilder
         */
        public CreateLivestreamObjectRequestBuilder playerId(String playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Set restreams
         * @param restreams Use this parameter to add, edit, or remove RTMP services where you want to restream a live stream. The list can only contain up to 5 destinations. (optional)
         * @return CreateLivestreamObjectRequestBuilder
         */
        public CreateLivestreamObjectRequestBuilder restreams(List<RestreamsRequestObject> restreams) {
            this.restreams = restreams;
            return this;
        }
        
        /**
         * Build call for createLivestreamObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveStreamCreationPayload liveStreamCreationPayload = buildBodyParams();
            return createLivestreamObjectCall(liveStreamCreationPayload, _callback);
        }

        private LiveStreamCreationPayload buildBodyParams() {
            LiveStreamCreationPayload liveStreamCreationPayload = new LiveStreamCreationPayload();
            liveStreamCreationPayload.name(this.name);
            liveStreamCreationPayload._public(this._public);
            liveStreamCreationPayload.playerId(this.playerId);
            liveStreamCreationPayload.restreams(this.restreams);
            return liveStreamCreationPayload;
        }

        /**
         * Execute createLivestreamObject request
         * @return LiveStream
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public LiveStream execute() throws ApiException {
            LiveStreamCreationPayload liveStreamCreationPayload = buildBodyParams();
            ApiResponse<LiveStream> localVarResp = createLivestreamObjectWithHttpInfo(liveStreamCreationPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLivestreamObject request with HTTP info returned
         * @return ApiResponse&lt;LiveStream&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStream> executeWithHttpInfo() throws ApiException {
            LiveStreamCreationPayload liveStreamCreationPayload = buildBodyParams();
            return createLivestreamObjectWithHttpInfo(liveStreamCreationPayload);
        }

        /**
         * Execute createLivestreamObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStream> _callback) throws ApiException {
            LiveStreamCreationPayload liveStreamCreationPayload = buildBodyParams();
            return createLivestreamObjectAsync(liveStreamCreationPayload, _callback);
        }
    }

    /**
     * Create live stream
     * Creates a livestream object.
     * @param liveStreamCreationPayload  (required)
     * @return CreateLivestreamObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateLivestreamObjectRequestBuilder createLivestreamObject(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateLivestreamObjectRequestBuilder(name);
    }
    private okhttp3.Call deleteLivestreamCall(String liveStreamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live-streams/{liveStreamId}"
            .replace("{" + "liveStreamId" + "}", localVarApiClient.escapeString(liveStreamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLivestreamValidateBeforeCall(String liveStreamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamId' is set
        if (liveStreamId == null) {
            throw new ApiException("Missing the required parameter 'liveStreamId' when calling deleteLivestream(Async)");
        }

        return deleteLivestreamCall(liveStreamId, _callback);

    }


    private ApiResponse<Void> deleteLivestreamWithHttpInfo(String liveStreamId) throws ApiException {
        okhttp3.Call localVarCall = deleteLivestreamValidateBeforeCall(liveStreamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLivestreamAsync(String liveStreamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLivestreamValidateBeforeCall(liveStreamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteLivestreamRequestBuilder {
        private final String liveStreamId;

        private DeleteLivestreamRequestBuilder(String liveStreamId) {
            this.liveStreamId = liveStreamId;
        }

        /**
         * Build call for deleteLivestream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLivestreamCall(liveStreamId, _callback);
        }


        /**
         * Execute deleteLivestream request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLivestreamWithHttpInfo(liveStreamId);
        }

        /**
         * Execute deleteLivestream request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLivestreamWithHttpInfo(liveStreamId);
        }

        /**
         * Execute deleteLivestream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLivestreamAsync(liveStreamId, _callback);
        }
    }

    /**
     * Delete a live stream
     * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
     * @param liveStreamId The unique ID for the live stream that you want to remove. (required)
     * @return DeleteLivestreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLivestreamRequestBuilder deleteLivestream(String liveStreamId) throws IllegalArgumentException {
        if (liveStreamId == null) throw new IllegalArgumentException("\"liveStreamId\" is required but got null");
            

        return new DeleteLivestreamRequestBuilder(liveStreamId);
    }
    private okhttp3.Call deleteThumbnailCall(String liveStreamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live-streams/{liveStreamId}/thumbnail"
            .replace("{" + "liveStreamId" + "}", localVarApiClient.escapeString(liveStreamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThumbnailValidateBeforeCall(String liveStreamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamId' is set
        if (liveStreamId == null) {
            throw new ApiException("Missing the required parameter 'liveStreamId' when calling deleteThumbnail(Async)");
        }

        return deleteThumbnailCall(liveStreamId, _callback);

    }


    private ApiResponse<LiveStream> deleteThumbnailWithHttpInfo(String liveStreamId) throws ApiException {
        okhttp3.Call localVarCall = deleteThumbnailValidateBeforeCall(liveStreamId, null);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteThumbnailAsync(String liveStreamId, final ApiCallback<LiveStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThumbnailValidateBeforeCall(liveStreamId, _callback);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteThumbnailRequestBuilder {
        private final String liveStreamId;

        private DeleteThumbnailRequestBuilder(String liveStreamId) {
            this.liveStreamId = liveStreamId;
        }

        /**
         * Build call for deleteThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThumbnailCall(liveStreamId, _callback);
        }


        /**
         * Execute deleteThumbnail request
         * @return LiveStream
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public LiveStream execute() throws ApiException {
            ApiResponse<LiveStream> localVarResp = deleteThumbnailWithHttpInfo(liveStreamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteThumbnail request with HTTP info returned
         * @return ApiResponse&lt;LiveStream&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStream> executeWithHttpInfo() throws ApiException {
            return deleteThumbnailWithHttpInfo(liveStreamId);
        }

        /**
         * Execute deleteThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStream> _callback) throws ApiException {
            return deleteThumbnailAsync(liveStreamId, _callback);
        }
    }

    /**
     * Delete a thumbnail
     * Send the unique identifier for a live stream to delete its thumbnail.
     * @param liveStreamId The unique identifier of the live stream whose thumbnail you want to delete. (required)
     * @return DeleteThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThumbnailRequestBuilder deleteThumbnail(String liveStreamId) throws IllegalArgumentException {
        if (liveStreamId == null) throw new IllegalArgumentException("\"liveStreamId\" is required but got null");
            

        return new DeleteThumbnailRequestBuilder(liveStreamId);
    }
    private okhttp3.Call getLivestreamByIdCall(String liveStreamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live-streams/{liveStreamId}"
            .replace("{" + "liveStreamId" + "}", localVarApiClient.escapeString(liveStreamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivestreamByIdValidateBeforeCall(String liveStreamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamId' is set
        if (liveStreamId == null) {
            throw new ApiException("Missing the required parameter 'liveStreamId' when calling getLivestreamById(Async)");
        }

        return getLivestreamByIdCall(liveStreamId, _callback);

    }


    private ApiResponse<LiveStream> getLivestreamByIdWithHttpInfo(String liveStreamId) throws ApiException {
        okhttp3.Call localVarCall = getLivestreamByIdValidateBeforeCall(liveStreamId, null);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivestreamByIdAsync(String liveStreamId, final ApiCallback<LiveStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivestreamByIdValidateBeforeCall(liveStreamId, _callback);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivestreamByIdRequestBuilder {
        private final String liveStreamId;

        private GetLivestreamByIdRequestBuilder(String liveStreamId) {
            this.liveStreamId = liveStreamId;
        }

        /**
         * Build call for getLivestreamById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivestreamByIdCall(liveStreamId, _callback);
        }


        /**
         * Execute getLivestreamById request
         * @return LiveStream
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public LiveStream execute() throws ApiException {
            ApiResponse<LiveStream> localVarResp = getLivestreamByIdWithHttpInfo(liveStreamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivestreamById request with HTTP info returned
         * @return ApiResponse&lt;LiveStream&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStream> executeWithHttpInfo() throws ApiException {
            return getLivestreamByIdWithHttpInfo(liveStreamId);
        }

        /**
         * Execute getLivestreamById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStream> _callback) throws ApiException {
            return getLivestreamByIdAsync(liveStreamId, _callback);
        }
    }

    /**
     * Retrieve live stream
     * Get a livestream by id.
     * @param liveStreamId The unique ID for the live stream you want to watch. (required)
     * @return GetLivestreamByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLivestreamByIdRequestBuilder getLivestreamById(String liveStreamId) throws IllegalArgumentException {
        if (liveStreamId == null) throw new IllegalArgumentException("\"liveStreamId\" is required but got null");
            

        return new GetLivestreamByIdRequestBuilder(liveStreamId);
    }
    private okhttp3.Call listAllCall(String streamKey, String name, String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live-streams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (streamKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streamKey", streamKey));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String streamKey, String name, String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listAllCall(streamKey, name, sortBy, sortOrder, currentPage, pageSize, _callback);

    }


    private ApiResponse<LiveStreamListResponse> listAllWithHttpInfo(String streamKey, String name, String sortBy, String sortOrder, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(streamKey, name, sortBy, sortOrder, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<LiveStreamListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String streamKey, String name, String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback<LiveStreamListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(streamKey, name, sortBy, sortOrder, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String streamKey;
        private String name;
        private String sortBy;
        private String sortOrder;
        private Integer currentPage;
        private Integer pageSize;

        private ListAllRequestBuilder() {
        }

        /**
         * Set streamKey
         * @param streamKey The unique stream key that allows you to stream videos. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }
        
        /**
         * Set name
         * @param name You can filter live streams by their name or a part of their name. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Enables you to sort live stream results. Allowed attributes: &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;. &#x60;name&#x60; - the name of the live stream. &#x60;createdAt&#x60; - the time a live stream was created. &#x60;updatedAt&#x60; - the time a live stream was last updated.  When using &#x60;createdAt&#x60; or &#x60;updatedAt&#x60;, the API sorts the results based on the ISO-8601 time format.  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(streamKey, name, sortBy, sortOrder, currentPage, pageSize, _callback);
        }


        /**
         * Execute listAll request
         * @return LiveStreamListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamListResponse execute() throws ApiException {
            ApiResponse<LiveStreamListResponse> localVarResp = listAllWithHttpInfo(streamKey, name, sortBy, sortOrder, currentPage, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamListResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(streamKey, name, sortBy, sortOrder, currentPage, pageSize);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamListResponse> _callback) throws ApiException {
            return listAllAsync(streamKey, name, sortBy, sortOrder, currentPage, pageSize, _callback);
        }
    }

    /**
     * List all live streams
     * Get the list of livestreams on the workspace.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateLivestreamObjectCall(String liveStreamId, LiveStreamUpdatePayload liveStreamUpdatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveStreamUpdatePayload;

        // create path and map variables
        String localVarPath = "/live-streams/{liveStreamId}"
            .replace("{" + "liveStreamId" + "}", localVarApiClient.escapeString(liveStreamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLivestreamObjectValidateBeforeCall(String liveStreamId, LiveStreamUpdatePayload liveStreamUpdatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamId' is set
        if (liveStreamId == null) {
            throw new ApiException("Missing the required parameter 'liveStreamId' when calling updateLivestreamObject(Async)");
        }

        // verify the required parameter 'liveStreamUpdatePayload' is set
        if (liveStreamUpdatePayload == null) {
            throw new ApiException("Missing the required parameter 'liveStreamUpdatePayload' when calling updateLivestreamObject(Async)");
        }

        return updateLivestreamObjectCall(liveStreamId, liveStreamUpdatePayload, _callback);

    }


    private ApiResponse<LiveStream> updateLivestreamObjectWithHttpInfo(String liveStreamId, LiveStreamUpdatePayload liveStreamUpdatePayload) throws ApiException {
        okhttp3.Call localVarCall = updateLivestreamObjectValidateBeforeCall(liveStreamId, liveStreamUpdatePayload, null);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLivestreamObjectAsync(String liveStreamId, LiveStreamUpdatePayload liveStreamUpdatePayload, final ApiCallback<LiveStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLivestreamObjectValidateBeforeCall(liveStreamId, liveStreamUpdatePayload, _callback);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLivestreamObjectRequestBuilder {
        private final String liveStreamId;
        private String name;
        private Boolean _public;
        private String playerId;
        private List<RestreamsRequestObject> restreams;

        private UpdateLivestreamObjectRequestBuilder(String liveStreamId) {
            this.liveStreamId = liveStreamId;
        }

        /**
         * Set name
         * @param name The name you want to use for your live stream. (optional)
         * @return UpdateLivestreamObjectRequestBuilder
         */
        public UpdateLivestreamObjectRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Learn more about the Private Video feature [here](https://docs.api.video/delivery-analytics/video-privacy-access-management). (optional)
         * @return UpdateLivestreamObjectRequestBuilder
         */
        public UpdateLivestreamObjectRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId The unique ID for the player associated with a live stream that you want to update. (optional)
         * @return UpdateLivestreamObjectRequestBuilder
         */
        public UpdateLivestreamObjectRequestBuilder playerId(String playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Set restreams
         * @param restreams Use this parameter to add, edit, or remove RTMP services where you want to restream a live stream. The list can only contain up to 5 destinations. This operation updates all restream destinations in the same request. If you do not want to modify an existing restream destination, you need to include it in your request, otherwise it is removed. (optional)
         * @return UpdateLivestreamObjectRequestBuilder
         */
        public UpdateLivestreamObjectRequestBuilder restreams(List<RestreamsRequestObject> restreams) {
            this.restreams = restreams;
            return this;
        }
        
        /**
         * Build call for updateLivestreamObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveStreamUpdatePayload liveStreamUpdatePayload = buildBodyParams();
            return updateLivestreamObjectCall(liveStreamId, liveStreamUpdatePayload, _callback);
        }

        private LiveStreamUpdatePayload buildBodyParams() {
            LiveStreamUpdatePayload liveStreamUpdatePayload = new LiveStreamUpdatePayload();
            liveStreamUpdatePayload.name(this.name);
            liveStreamUpdatePayload._public(this._public);
            liveStreamUpdatePayload.playerId(this.playerId);
            liveStreamUpdatePayload.restreams(this.restreams);
            return liveStreamUpdatePayload;
        }

        /**
         * Execute updateLivestreamObject request
         * @return LiveStream
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public LiveStream execute() throws ApiException {
            LiveStreamUpdatePayload liveStreamUpdatePayload = buildBodyParams();
            ApiResponse<LiveStream> localVarResp = updateLivestreamObjectWithHttpInfo(liveStreamId, liveStreamUpdatePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLivestreamObject request with HTTP info returned
         * @return ApiResponse&lt;LiveStream&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStream> executeWithHttpInfo() throws ApiException {
            LiveStreamUpdatePayload liveStreamUpdatePayload = buildBodyParams();
            return updateLivestreamObjectWithHttpInfo(liveStreamId, liveStreamUpdatePayload);
        }

        /**
         * Execute updateLivestreamObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStream> _callback) throws ApiException {
            LiveStreamUpdatePayload liveStreamUpdatePayload = buildBodyParams();
            return updateLivestreamObjectAsync(liveStreamId, liveStreamUpdatePayload, _callback);
        }
    }

    /**
     * Update a live stream
     * Updates the livestream object.
     * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details. (required)
     * @param liveStreamUpdatePayload  (required)
     * @return UpdateLivestreamObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLivestreamObjectRequestBuilder updateLivestreamObject(String liveStreamId) throws IllegalArgumentException {
        if (liveStreamId == null) throw new IllegalArgumentException("\"liveStreamId\" is required but got null");
            

        return new UpdateLivestreamObjectRequestBuilder(liveStreamId);
    }
    private okhttp3.Call uploadThumbnailCall(String liveStreamId, File _file, LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveStreamThumbnailUploadPayload;

        // create path and map variables
        String localVarPath = "/live-streams/{liveStreamId}/thumbnail"
            .replace("{" + "liveStreamId" + "}", localVarApiClient.escapeString(liveStreamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadThumbnailValidateBeforeCall(String liveStreamId, File _file, LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamId' is set
        if (liveStreamId == null) {
            throw new ApiException("Missing the required parameter 'liveStreamId' when calling uploadThumbnail(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadThumbnail(Async)");
        }

        // verify the required parameter 'liveStreamThumbnailUploadPayload' is set
        if (liveStreamThumbnailUploadPayload == null) {
            throw new ApiException("Missing the required parameter 'liveStreamThumbnailUploadPayload' when calling uploadThumbnail(Async)");
        }

        return uploadThumbnailCall(liveStreamId, _file, liveStreamThumbnailUploadPayload, _callback);

    }


    private ApiResponse<LiveStream> uploadThumbnailWithHttpInfo(String liveStreamId, File _file, LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload) throws ApiException {
        okhttp3.Call localVarCall = uploadThumbnailValidateBeforeCall(liveStreamId, _file, liveStreamThumbnailUploadPayload, null);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadThumbnailAsync(String liveStreamId, File _file, LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload, final ApiCallback<LiveStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadThumbnailValidateBeforeCall(liveStreamId, _file, liveStreamThumbnailUploadPayload, _callback);
        Type localVarReturnType = new TypeToken<LiveStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadThumbnailRequestBuilder {
        private final String liveStreamId;
        private final File _file;

        private UploadThumbnailRequestBuilder(String liveStreamId, File _file) {
            this.liveStreamId = liveStreamId;
            this._file = _file;
        }

        /**
         * Build call for uploadThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload = buildBodyParams();
            return uploadThumbnailCall(liveStreamId, _file, liveStreamThumbnailUploadPayload, _callback);
        }

        private LiveStreamThumbnailUploadPayload buildBodyParams() {
            LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload = new LiveStreamThumbnailUploadPayload();
            liveStreamThumbnailUploadPayload._file(this._file);
            return liveStreamThumbnailUploadPayload;
        }

        /**
         * Execute uploadThumbnail request
         * @return LiveStream
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public LiveStream execute() throws ApiException {
            LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload = buildBodyParams();
            ApiResponse<LiveStream> localVarResp = uploadThumbnailWithHttpInfo(liveStreamId, _file, liveStreamThumbnailUploadPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadThumbnail request with HTTP info returned
         * @return ApiResponse&lt;LiveStream&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStream> executeWithHttpInfo() throws ApiException {
            LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload = buildBodyParams();
            return uploadThumbnailWithHttpInfo(liveStreamId, _file, liveStreamThumbnailUploadPayload);
        }

        /**
         * Execute uploadThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStream> _callback) throws ApiException {
            LiveStreamThumbnailUploadPayload liveStreamThumbnailUploadPayload = buildBodyParams();
            return uploadThumbnailAsync(liveStreamId, _file, liveStreamThumbnailUploadPayload, _callback);
        }
    }

    /**
     * Upload a thumbnail
     * Upload the thumbnail for the livestream.
     * @param liveStreamId The unique ID for the live stream you want to upload. (required)
     * @param _file The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB. (required)
     * @param liveStreamThumbnailUploadPayload  (required)
     * @return UploadThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadThumbnailRequestBuilder uploadThumbnail(String liveStreamId, File _file) throws IllegalArgumentException {
        if (liveStreamId == null) throw new IllegalArgumentException("\"liveStreamId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadThumbnailRequestBuilder(liveStreamId, _file);
    }
}
