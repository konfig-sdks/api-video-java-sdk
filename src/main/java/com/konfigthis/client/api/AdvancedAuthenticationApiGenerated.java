/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessToken;
import com.konfigthis.client.model.AuthenticatePayload;
import com.konfigthis.client.model.RefreshTokenPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdvancedAuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdvancedAuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdvancedAuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBearerTokenCall(AuthenticatePayload authenticatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatePayload;

        // create path and map variables
        String localVarPath = "/auth/api-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBearerTokenValidateBeforeCall(AuthenticatePayload authenticatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatePayload' is set
        if (authenticatePayload == null) {
            throw new ApiException("Missing the required parameter 'authenticatePayload' when calling getBearerToken(Async)");
        }

        return getBearerTokenCall(authenticatePayload, _callback);

    }


    private ApiResponse<AccessToken> getBearerTokenWithHttpInfo(AuthenticatePayload authenticatePayload) throws ApiException {
        okhttp3.Call localVarCall = getBearerTokenValidateBeforeCall(authenticatePayload, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBearerTokenAsync(AuthenticatePayload authenticatePayload, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBearerTokenValidateBeforeCall(authenticatePayload, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBearerTokenRequestBuilder {
        private final String apiKey;

        private GetBearerTokenRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Build call for getBearerToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticatePayload authenticatePayload = buildBodyParams();
            return getBearerTokenCall(authenticatePayload, _callback);
        }

        private AuthenticatePayload buildBodyParams() {
            AuthenticatePayload authenticatePayload = new AuthenticatePayload();
            authenticatePayload.apiKey(this.apiKey);
            return authenticatePayload;
        }

        /**
         * Execute getBearerToken request
         * @return AccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AccessToken execute() throws ApiException {
            AuthenticatePayload authenticatePayload = buildBodyParams();
            ApiResponse<AccessToken> localVarResp = getBearerTokenWithHttpInfo(authenticatePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBearerToken request with HTTP info returned
         * @return ApiResponse&lt;AccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessToken> executeWithHttpInfo() throws ApiException {
            AuthenticatePayload authenticatePayload = buildBodyParams();
            return getBearerTokenWithHttpInfo(authenticatePayload);
        }

        /**
         * Execute getBearerToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessToken> _callback) throws ApiException {
            AuthenticatePayload authenticatePayload = buildBodyParams();
            return getBearerTokenAsync(authenticatePayload, _callback);
        }
    }

    /**
     * Get Bearer Token
     * Returns a bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
     * @param authenticatePayload  (required)
     * @return GetBearerTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetBearerTokenRequestBuilder getBearerToken(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetBearerTokenRequestBuilder(apiKey);
    }
    private okhttp3.Call refreshBearerTokenCall(RefreshTokenPayload refreshTokenPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshTokenPayload;

        // create path and map variables
        String localVarPath = "/auth/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshBearerTokenValidateBeforeCall(RefreshTokenPayload refreshTokenPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'refreshTokenPayload' is set
        if (refreshTokenPayload == null) {
            throw new ApiException("Missing the required parameter 'refreshTokenPayload' when calling refreshBearerToken(Async)");
        }

        return refreshBearerTokenCall(refreshTokenPayload, _callback);

    }


    private ApiResponse<AccessToken> refreshBearerTokenWithHttpInfo(RefreshTokenPayload refreshTokenPayload) throws ApiException {
        okhttp3.Call localVarCall = refreshBearerTokenValidateBeforeCall(refreshTokenPayload, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshBearerTokenAsync(RefreshTokenPayload refreshTokenPayload, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshBearerTokenValidateBeforeCall(refreshTokenPayload, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshBearerTokenRequestBuilder {
        private final String refreshToken;

        private RefreshBearerTokenRequestBuilder(String refreshToken) {
            this.refreshToken = refreshToken;
        }

        /**
         * Build call for refreshBearerToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RefreshTokenPayload refreshTokenPayload = buildBodyParams();
            return refreshBearerTokenCall(refreshTokenPayload, _callback);
        }

        private RefreshTokenPayload buildBodyParams() {
            RefreshTokenPayload refreshTokenPayload = new RefreshTokenPayload();
            refreshTokenPayload.refreshToken(this.refreshToken);
            return refreshTokenPayload;
        }

        /**
         * Execute refreshBearerToken request
         * @return AccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AccessToken execute() throws ApiException {
            RefreshTokenPayload refreshTokenPayload = buildBodyParams();
            ApiResponse<AccessToken> localVarResp = refreshBearerTokenWithHttpInfo(refreshTokenPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshBearerToken request with HTTP info returned
         * @return ApiResponse&lt;AccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessToken> executeWithHttpInfo() throws ApiException {
            RefreshTokenPayload refreshTokenPayload = buildBodyParams();
            return refreshBearerTokenWithHttpInfo(refreshTokenPayload);
        }

        /**
         * Execute refreshBearerToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessToken> _callback) throws ApiException {
            RefreshTokenPayload refreshTokenPayload = buildBodyParams();
            return refreshBearerTokenAsync(refreshTokenPayload, _callback);
        }
    }

    /**
     * Refresh Bearer Token
     * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
     * @param refreshTokenPayload  (required)
     * @return RefreshBearerTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RefreshBearerTokenRequestBuilder refreshBearerToken(String refreshToken) throws IllegalArgumentException {
        if (refreshToken == null) throw new IllegalArgumentException("\"refreshToken\" is required but got null");
            

        return new RefreshBearerTokenRequestBuilder(refreshToken);
    }
}
