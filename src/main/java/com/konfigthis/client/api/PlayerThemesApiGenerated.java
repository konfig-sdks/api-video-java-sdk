/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.PlayerTheme;
import com.konfigthis.client.model.PlayerThemeCreationPayload;
import com.konfigthis.client.model.PlayerThemeUpdatePayload;
import com.konfigthis.client.model.PlayerThemeUploadLogoPayload;
import com.konfigthis.client.model.PlayerThemesListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlayerThemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlayerThemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PlayerThemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deletePlayerCall(String playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{playerId}"
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlayerValidateBeforeCall(String playerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling deletePlayer(Async)");
        }

        return deletePlayerCall(playerId, _callback);

    }


    private ApiResponse<Void> deletePlayerWithHttpInfo(String playerId) throws ApiException {
        okhttp3.Call localVarCall = deletePlayerValidateBeforeCall(playerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePlayerAsync(String playerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlayerValidateBeforeCall(playerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePlayerRequestBuilder {
        private final String playerId;

        private DeletePlayerRequestBuilder(String playerId) {
            this.playerId = playerId;
        }

        /**
         * Build call for deletePlayer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePlayerCall(playerId, _callback);
        }


        /**
         * Execute deletePlayer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePlayerWithHttpInfo(playerId);
        }

        /**
         * Execute deletePlayer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePlayerWithHttpInfo(playerId);
        }

        /**
         * Execute deletePlayer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePlayerAsync(playerId, _callback);
        }
    }

    /**
     * Delete a player
     * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
     * @param playerId The unique identifier for the player you want to delete. (required)
     * @return DeletePlayerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeletePlayerRequestBuilder deletePlayer(String playerId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
            

        return new DeletePlayerRequestBuilder(playerId);
    }
    private okhttp3.Call getThemeByPlayerIdCall(String playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{playerId}"
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThemeByPlayerIdValidateBeforeCall(String playerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling getThemeByPlayerId(Async)");
        }

        return getThemeByPlayerIdCall(playerId, _callback);

    }


    private ApiResponse<PlayerTheme> getThemeByPlayerIdWithHttpInfo(String playerId) throws ApiException {
        okhttp3.Call localVarCall = getThemeByPlayerIdValidateBeforeCall(playerId, null);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThemeByPlayerIdAsync(String playerId, final ApiCallback<PlayerTheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThemeByPlayerIdValidateBeforeCall(playerId, _callback);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetThemeByPlayerIdRequestBuilder {
        private final String playerId;

        private GetThemeByPlayerIdRequestBuilder(String playerId) {
            this.playerId = playerId;
        }

        /**
         * Build call for getThemeByPlayerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThemeByPlayerIdCall(playerId, _callback);
        }


        /**
         * Execute getThemeByPlayerId request
         * @return PlayerTheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PlayerTheme execute() throws ApiException {
            ApiResponse<PlayerTheme> localVarResp = getThemeByPlayerIdWithHttpInfo(playerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getThemeByPlayerId request with HTTP info returned
         * @return ApiResponse&lt;PlayerTheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerTheme> executeWithHttpInfo() throws ApiException {
            return getThemeByPlayerIdWithHttpInfo(playerId);
        }

        /**
         * Execute getThemeByPlayerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerTheme> _callback) throws ApiException {
            return getThemeByPlayerIdAsync(playerId, _callback);
        }
    }

    /**
     * Retrieve a player
     * Retreive a player theme by player id.
     * @param playerId The unique identifier for the player you want to retrieve.  (required)
     * @return GetThemeByPlayerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetThemeByPlayerIdRequestBuilder getThemeByPlayerId(String playerId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
            

        return new GetThemeByPlayerIdRequestBuilder(playerId);
    }
    private okhttp3.Call playersCall(String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersValidateBeforeCall(String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return playersCall(sortBy, sortOrder, currentPage, pageSize, _callback);

    }


    private ApiResponse<PlayerThemesListResponse> playersWithHttpInfo(String sortBy, String sortOrder, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = playersValidateBeforeCall(sortBy, sortOrder, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<PlayerThemesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call playersAsync(String sortBy, String sortOrder, Integer currentPage, Integer pageSize, final ApiCallback<PlayerThemesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersValidateBeforeCall(sortBy, sortOrder, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PlayerThemesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PlayersRequestBuilder {
        private String sortBy;
        private String sortOrder;
        private Integer currentPage;
        private Integer pageSize;

        private PlayersRequestBuilder() {
        }

        /**
         * Set sortBy
         * @param sortBy createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format. (optional)
         * @return PlayersRequestBuilder
         */
        public PlayersRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. (optional)
         * @return PlayersRequestBuilder
         */
        public PlayersRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return PlayersRequestBuilder
         */
        public PlayersRequestBuilder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return PlayersRequestBuilder
         */
        public PlayersRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for players
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return playersCall(sortBy, sortOrder, currentPage, pageSize, _callback);
        }


        /**
         * Execute players request
         * @return PlayerThemesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PlayerThemesListResponse execute() throws ApiException {
            ApiResponse<PlayerThemesListResponse> localVarResp = playersWithHttpInfo(sortBy, sortOrder, currentPage, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute players request with HTTP info returned
         * @return ApiResponse&lt;PlayerThemesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerThemesListResponse> executeWithHttpInfo() throws ApiException {
            return playersWithHttpInfo(sortBy, sortOrder, currentPage, pageSize);
        }

        /**
         * Execute players request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerThemesListResponse> _callback) throws ApiException {
            return playersAsync(sortBy, sortOrder, currentPage, pageSize, _callback);
        }
    }

    /**
     * List all player themes
     * Retrieve a list of all the player themes you created, as well as details about each one.
     * @return PlayersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PlayersRequestBuilder players() throws IllegalArgumentException {
        return new PlayersRequestBuilder();
    }
    private okhttp3.Call players_0Call(PlayerThemeCreationPayload playerThemeCreationPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playerThemeCreationPayload;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call players_0ValidateBeforeCall(PlayerThemeCreationPayload playerThemeCreationPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerThemeCreationPayload' is set
        if (playerThemeCreationPayload == null) {
            throw new ApiException("Missing the required parameter 'playerThemeCreationPayload' when calling players_0(Async)");
        }

        return players_0Call(playerThemeCreationPayload, _callback);

    }


    private ApiResponse<PlayerTheme> players_0WithHttpInfo(PlayerThemeCreationPayload playerThemeCreationPayload) throws ApiException {
        okhttp3.Call localVarCall = players_0ValidateBeforeCall(playerThemeCreationPayload, null);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call players_0Async(PlayerThemeCreationPayload playerThemeCreationPayload, final ApiCallback<PlayerTheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = players_0ValidateBeforeCall(playerThemeCreationPayload, _callback);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Players0RequestBuilder {
        private String name;
        private String text;
        private String link;
        private String linkHover;
        private String linkActive;
        private String trackPlayed;
        private String trackUnplayed;
        private String trackBackground;
        private String backgroundTop;
        private String backgroundBottom;
        private String backgroundText;
        private Boolean enableApi;
        private Boolean enableControls;
        private Boolean forceAutoplay;
        private Boolean hideTitle;
        private Boolean forceLoop;

        private Players0RequestBuilder() {
        }

        /**
         * Set name
         * @param name Add a name for your player theme here. (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set text
         * @param text RGBA color for timer text. Default: rgba(255, 255, 255, 1) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set link
         * @param link RGBA color for all controls. Default: rgba(255, 255, 255, 1) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set linkHover
         * @param linkHover RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder linkHover(String linkHover) {
            this.linkHover = linkHover;
            return this;
        }
        
        /**
         * Set linkActive
         * @param linkActive RGBA color for the play button when hovered. (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder linkActive(String linkActive) {
            this.linkActive = linkActive;
            return this;
        }
        
        /**
         * Set trackPlayed
         * @param trackPlayed RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder trackPlayed(String trackPlayed) {
            this.trackPlayed = trackPlayed;
            return this;
        }
        
        /**
         * Set trackUnplayed
         * @param trackUnplayed RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder trackUnplayed(String trackUnplayed) {
            this.trackUnplayed = trackUnplayed;
            return this;
        }
        
        /**
         * Set trackBackground
         * @param trackBackground RGBA color playback bar: background. Default: rgba(255, 255, 255, .2) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder trackBackground(String trackBackground) {
            this.trackBackground = trackBackground;
            return this;
        }
        
        /**
         * Set backgroundTop
         * @param backgroundTop RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder backgroundTop(String backgroundTop) {
            this.backgroundTop = backgroundTop;
            return this;
        }
        
        /**
         * Set backgroundBottom
         * @param backgroundBottom RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder backgroundBottom(String backgroundBottom) {
            this.backgroundBottom = backgroundBottom;
            return this;
        }
        
        /**
         * Set backgroundText
         * @param backgroundText RGBA color for title text. Default: rgba(255, 255, 255, 1) (optional)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder backgroundText(String backgroundText) {
            this.backgroundText = backgroundText;
            return this;
        }
        
        /**
         * Set enableApi
         * @param enableApi enable/disable player SDK access. Default: true (optional, default to true)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder enableApi(Boolean enableApi) {
            this.enableApi = enableApi;
            return this;
        }
        
        /**
         * Set enableControls
         * @param enableControls enable/disable player controls. Default: true (optional, default to true)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder enableControls(Boolean enableControls) {
            this.enableControls = enableControls;
            return this;
        }
        
        /**
         * Set forceAutoplay
         * @param forceAutoplay enable/disable player autoplay. Default: false (optional, default to false)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder forceAutoplay(Boolean forceAutoplay) {
            this.forceAutoplay = forceAutoplay;
            return this;
        }
        
        /**
         * Set hideTitle
         * @param hideTitle enable/disable title. Default: false (optional, default to false)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder hideTitle(Boolean hideTitle) {
            this.hideTitle = hideTitle;
            return this;
        }
        
        /**
         * Set forceLoop
         * @param forceLoop enable/disable looping. Default: false (optional, default to false)
         * @return Players0RequestBuilder
         */
        public Players0RequestBuilder forceLoop(Boolean forceLoop) {
            this.forceLoop = forceLoop;
            return this;
        }
        
        /**
         * Build call for players_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlayerThemeCreationPayload playerThemeCreationPayload = buildBodyParams();
            return players_0Call(playerThemeCreationPayload, _callback);
        }

        private PlayerThemeCreationPayload buildBodyParams() {
            PlayerThemeCreationPayload playerThemeCreationPayload = new PlayerThemeCreationPayload();
            playerThemeCreationPayload.name(this.name);
            playerThemeCreationPayload.text(this.text);
            playerThemeCreationPayload.link(this.link);
            playerThemeCreationPayload.linkHover(this.linkHover);
            playerThemeCreationPayload.linkActive(this.linkActive);
            playerThemeCreationPayload.trackPlayed(this.trackPlayed);
            playerThemeCreationPayload.trackUnplayed(this.trackUnplayed);
            playerThemeCreationPayload.trackBackground(this.trackBackground);
            playerThemeCreationPayload.backgroundTop(this.backgroundTop);
            playerThemeCreationPayload.backgroundBottom(this.backgroundBottom);
            playerThemeCreationPayload.backgroundText(this.backgroundText);
            playerThemeCreationPayload.enableApi(this.enableApi);
            playerThemeCreationPayload.enableControls(this.enableControls);
            playerThemeCreationPayload.forceAutoplay(this.forceAutoplay);
            playerThemeCreationPayload.hideTitle(this.hideTitle);
            playerThemeCreationPayload.forceLoop(this.forceLoop);
            return playerThemeCreationPayload;
        }

        /**
         * Execute players_0 request
         * @return PlayerTheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public PlayerTheme execute() throws ApiException {
            PlayerThemeCreationPayload playerThemeCreationPayload = buildBodyParams();
            ApiResponse<PlayerTheme> localVarResp = players_0WithHttpInfo(playerThemeCreationPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute players_0 request with HTTP info returned
         * @return ApiResponse&lt;PlayerTheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerTheme> executeWithHttpInfo() throws ApiException {
            PlayerThemeCreationPayload playerThemeCreationPayload = buildBodyParams();
            return players_0WithHttpInfo(playerThemeCreationPayload);
        }

        /**
         * Execute players_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerTheme> _callback) throws ApiException {
            PlayerThemeCreationPayload playerThemeCreationPayload = buildBodyParams();
            return players_0Async(playerThemeCreationPayload, _callback);
        }
    }

    /**
     * Create a player
     * Create a player for your video, and customise it.
     * @param playerThemeCreationPayload  (required)
     * @return Players0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Players0RequestBuilder players_0() throws IllegalArgumentException {
        return new Players0RequestBuilder();
    }
    private okhttp3.Call removeLogoCall(String playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{playerId}/logo"
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLogoValidateBeforeCall(String playerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling removeLogo(Async)");
        }

        return removeLogoCall(playerId, _callback);

    }


    private ApiResponse<Void> removeLogoWithHttpInfo(String playerId) throws ApiException {
        okhttp3.Call localVarCall = removeLogoValidateBeforeCall(playerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLogoAsync(String playerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLogoValidateBeforeCall(playerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLogoRequestBuilder {
        private final String playerId;

        private RemoveLogoRequestBuilder(String playerId) {
            this.playerId = playerId;
        }

        /**
         * Build call for removeLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLogoCall(playerId, _callback);
        }


        /**
         * Execute removeLogo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLogoWithHttpInfo(playerId);
        }

        /**
         * Execute removeLogo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLogoWithHttpInfo(playerId);
        }

        /**
         * Execute removeLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLogoAsync(playerId, _callback);
        }
    }

    /**
     * Delete logo
     * Delete the logo associated to a player.
     * @param playerId The unique identifier for the player. (required)
     * @return RemoveLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLogoRequestBuilder removeLogo(String playerId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
            

        return new RemoveLogoRequestBuilder(playerId);
    }
    private okhttp3.Call updatePlayerDetailsCall(String playerId, PlayerThemeUpdatePayload playerThemeUpdatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playerThemeUpdatePayload;

        // create path and map variables
        String localVarPath = "/players/{playerId}"
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlayerDetailsValidateBeforeCall(String playerId, PlayerThemeUpdatePayload playerThemeUpdatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling updatePlayerDetails(Async)");
        }

        // verify the required parameter 'playerThemeUpdatePayload' is set
        if (playerThemeUpdatePayload == null) {
            throw new ApiException("Missing the required parameter 'playerThemeUpdatePayload' when calling updatePlayerDetails(Async)");
        }

        return updatePlayerDetailsCall(playerId, playerThemeUpdatePayload, _callback);

    }


    private ApiResponse<PlayerTheme> updatePlayerDetailsWithHttpInfo(String playerId, PlayerThemeUpdatePayload playerThemeUpdatePayload) throws ApiException {
        okhttp3.Call localVarCall = updatePlayerDetailsValidateBeforeCall(playerId, playerThemeUpdatePayload, null);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlayerDetailsAsync(String playerId, PlayerThemeUpdatePayload playerThemeUpdatePayload, final ApiCallback<PlayerTheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlayerDetailsValidateBeforeCall(playerId, playerThemeUpdatePayload, _callback);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlayerDetailsRequestBuilder {
        private final String playerId;
        private String name;
        private String text;
        private String link;
        private String linkHover;
        private String linkActive;
        private String trackPlayed;
        private String trackUnplayed;
        private String trackBackground;
        private String backgroundTop;
        private String backgroundBottom;
        private String backgroundText;
        private Boolean enableApi;
        private Boolean enableControls;
        private Boolean forceAutoplay;
        private Boolean hideTitle;
        private Boolean forceLoop;

        private UpdatePlayerDetailsRequestBuilder(String playerId) {
            this.playerId = playerId;
        }

        /**
         * Set name
         * @param name Add a name for your player theme here. (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set text
         * @param text RGBA color for timer text. Default: rgba(255, 255, 255, 1) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set link
         * @param link RGBA color for all controls. Default: rgba(255, 255, 255, 1) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set linkHover
         * @param linkHover RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder linkHover(String linkHover) {
            this.linkHover = linkHover;
            return this;
        }
        
        /**
         * Set linkActive
         * @param linkActive RGBA color for the play button when hovered. (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder linkActive(String linkActive) {
            this.linkActive = linkActive;
            return this;
        }
        
        /**
         * Set trackPlayed
         * @param trackPlayed RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder trackPlayed(String trackPlayed) {
            this.trackPlayed = trackPlayed;
            return this;
        }
        
        /**
         * Set trackUnplayed
         * @param trackUnplayed RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder trackUnplayed(String trackUnplayed) {
            this.trackUnplayed = trackUnplayed;
            return this;
        }
        
        /**
         * Set trackBackground
         * @param trackBackground RGBA color playback bar: background. Default: rgba(255, 255, 255, .2) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder trackBackground(String trackBackground) {
            this.trackBackground = trackBackground;
            return this;
        }
        
        /**
         * Set backgroundTop
         * @param backgroundTop RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder backgroundTop(String backgroundTop) {
            this.backgroundTop = backgroundTop;
            return this;
        }
        
        /**
         * Set backgroundBottom
         * @param backgroundBottom RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder backgroundBottom(String backgroundBottom) {
            this.backgroundBottom = backgroundBottom;
            return this;
        }
        
        /**
         * Set backgroundText
         * @param backgroundText RGBA color for title text. Default: rgba(255, 255, 255, 1) (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder backgroundText(String backgroundText) {
            this.backgroundText = backgroundText;
            return this;
        }
        
        /**
         * Set enableApi
         * @param enableApi enable/disable player SDK access. Default: true (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder enableApi(Boolean enableApi) {
            this.enableApi = enableApi;
            return this;
        }
        
        /**
         * Set enableControls
         * @param enableControls enable/disable player controls. Default: true (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder enableControls(Boolean enableControls) {
            this.enableControls = enableControls;
            return this;
        }
        
        /**
         * Set forceAutoplay
         * @param forceAutoplay enable/disable player autoplay. Default: false (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder forceAutoplay(Boolean forceAutoplay) {
            this.forceAutoplay = forceAutoplay;
            return this;
        }
        
        /**
         * Set hideTitle
         * @param hideTitle enable/disable title. Default: false (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder hideTitle(Boolean hideTitle) {
            this.hideTitle = hideTitle;
            return this;
        }
        
        /**
         * Set forceLoop
         * @param forceLoop enable/disable looping. Default: false (optional)
         * @return UpdatePlayerDetailsRequestBuilder
         */
        public UpdatePlayerDetailsRequestBuilder forceLoop(Boolean forceLoop) {
            this.forceLoop = forceLoop;
            return this;
        }
        
        /**
         * Build call for updatePlayerDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlayerThemeUpdatePayload playerThemeUpdatePayload = buildBodyParams();
            return updatePlayerDetailsCall(playerId, playerThemeUpdatePayload, _callback);
        }

        private PlayerThemeUpdatePayload buildBodyParams() {
            PlayerThemeUpdatePayload playerThemeUpdatePayload = new PlayerThemeUpdatePayload();
            playerThemeUpdatePayload.name(this.name);
            playerThemeUpdatePayload.text(this.text);
            playerThemeUpdatePayload.link(this.link);
            playerThemeUpdatePayload.linkHover(this.linkHover);
            playerThemeUpdatePayload.linkActive(this.linkActive);
            playerThemeUpdatePayload.trackPlayed(this.trackPlayed);
            playerThemeUpdatePayload.trackUnplayed(this.trackUnplayed);
            playerThemeUpdatePayload.trackBackground(this.trackBackground);
            playerThemeUpdatePayload.backgroundTop(this.backgroundTop);
            playerThemeUpdatePayload.backgroundBottom(this.backgroundBottom);
            playerThemeUpdatePayload.backgroundText(this.backgroundText);
            playerThemeUpdatePayload.enableApi(this.enableApi);
            playerThemeUpdatePayload.enableControls(this.enableControls);
            playerThemeUpdatePayload.forceAutoplay(this.forceAutoplay);
            playerThemeUpdatePayload.hideTitle(this.hideTitle);
            playerThemeUpdatePayload.forceLoop(this.forceLoop);
            return playerThemeUpdatePayload;
        }

        /**
         * Execute updatePlayerDetails request
         * @return PlayerTheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PlayerTheme execute() throws ApiException {
            PlayerThemeUpdatePayload playerThemeUpdatePayload = buildBodyParams();
            ApiResponse<PlayerTheme> localVarResp = updatePlayerDetailsWithHttpInfo(playerId, playerThemeUpdatePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlayerDetails request with HTTP info returned
         * @return ApiResponse&lt;PlayerTheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerTheme> executeWithHttpInfo() throws ApiException {
            PlayerThemeUpdatePayload playerThemeUpdatePayload = buildBodyParams();
            return updatePlayerDetailsWithHttpInfo(playerId, playerThemeUpdatePayload);
        }

        /**
         * Execute updatePlayerDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerTheme> _callback) throws ApiException {
            PlayerThemeUpdatePayload playerThemeUpdatePayload = buildBodyParams();
            return updatePlayerDetailsAsync(playerId, playerThemeUpdatePayload, _callback);
        }
    }

    /**
     * Update a player
     * Use a player ID to update specific details for a player.  NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
     * @param playerId The unique identifier for the player. (required)
     * @param playerThemeUpdatePayload  (required)
     * @return UpdatePlayerDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlayerDetailsRequestBuilder updatePlayerDetails(String playerId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
            

        return new UpdatePlayerDetailsRequestBuilder(playerId);
    }
    private okhttp3.Call uploadLogoCall(String playerId, File _file, PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload, String link, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playerThemeUploadLogoPayload;

        // create path and map variables
        String localVarPath = "/players/{playerId}/logo"
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (link != null) {
            localVarFormParams.put("link", link);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadLogoValidateBeforeCall(String playerId, File _file, PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload, String link, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling uploadLogo(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadLogo(Async)");
        }

        // verify the required parameter 'playerThemeUploadLogoPayload' is set
        if (playerThemeUploadLogoPayload == null) {
            throw new ApiException("Missing the required parameter 'playerThemeUploadLogoPayload' when calling uploadLogo(Async)");
        }

        return uploadLogoCall(playerId, _file, playerThemeUploadLogoPayload, link, _callback);

    }


    private ApiResponse<PlayerTheme> uploadLogoWithHttpInfo(String playerId, File _file, PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload, String link) throws ApiException {
        okhttp3.Call localVarCall = uploadLogoValidateBeforeCall(playerId, _file, playerThemeUploadLogoPayload, link, null);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadLogoAsync(String playerId, File _file, PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload, String link, final ApiCallback<PlayerTheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadLogoValidateBeforeCall(playerId, _file, playerThemeUploadLogoPayload, link, _callback);
        Type localVarReturnType = new TypeToken<PlayerTheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadLogoRequestBuilder {
        private final String playerId;
        private final File _file;
        private String link;

        private UploadLogoRequestBuilder(String playerId, File _file) {
            this.playerId = playerId;
            this._file = _file;
        }

        /**
         * Set link
         * @param link A public link that you want to advertise in your player. For example, you could add a link to your company. When a viewer clicks on your logo, they will be taken to this address. (optional)
         * @return UploadLogoRequestBuilder
         */
        public UploadLogoRequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Build call for uploadLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload = buildBodyParams();
            return uploadLogoCall(playerId, _file, playerThemeUploadLogoPayload, link, _callback);
        }

        private PlayerThemeUploadLogoPayload buildBodyParams() {
            PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload = new PlayerThemeUploadLogoPayload();
            playerThemeUploadLogoPayload._file(this._file);
            playerThemeUploadLogoPayload.link(this.link);
            return playerThemeUploadLogoPayload;
        }

        /**
         * Execute uploadLogo request
         * @return PlayerTheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public PlayerTheme execute() throws ApiException {
            PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload = buildBodyParams();
            ApiResponse<PlayerTheme> localVarResp = uploadLogoWithHttpInfo(playerId, _file, playerThemeUploadLogoPayload, link);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadLogo request with HTTP info returned
         * @return ApiResponse&lt;PlayerTheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerTheme> executeWithHttpInfo() throws ApiException {
            PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload = buildBodyParams();
            return uploadLogoWithHttpInfo(playerId, _file, playerThemeUploadLogoPayload, link);
        }

        /**
         * Execute uploadLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerTheme> _callback) throws ApiException {
            PlayerThemeUploadLogoPayload playerThemeUploadLogoPayload = buildBodyParams();
            return uploadLogoAsync(playerId, _file, playerThemeUploadLogoPayload, link, _callback);
        }
    }

    /**
     * Upload a logo
     * Upload an image file as a logo for your player. The image should fit within these constraints: - The image mime type must be &#x60;image/jpeg&#x60; or &#x60;image/png&#x60;. api.video recommends using &#x60;png&#x60; images with transparent background. - The image size should be a maximum of 200px width x 100px. - The file size should be a maximum of 100 KiB. 
     * @param playerId The unique identifier for the player. (required)
     * @param _file The name of the file you want to use for your logo. (required)
     * @param playerThemeUploadLogoPayload  (required)
     * @return UploadLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadLogoRequestBuilder uploadLogo(String playerId, File _file) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadLogoRequestBuilder(playerId, _file);
    }
}
